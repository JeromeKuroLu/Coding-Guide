<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ecmadao</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ecmadao.com/"/>
  <updated>2017-01-14T12:11:43.000Z</updated>
  <id>http://ecmadao.com/</id>
  
  <author>
    <name>ecmadao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【译文】使用Webpack构建你的React生产环境版本</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/%E8%AF%91%E6%96%87/%E3%80%90%E8%AF%91%E6%96%87%E3%80%91%E4%BD%BF%E7%94%A8Webpack%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84React%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/译文/【译文】使用Webpack构建你的React生产环境版本/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#%E3%80%90%E8%AF%91%E6%96%87%E3%80%91%E4%BD%BF%E7%94%A8webpack%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84react%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%89%88%E6%9C%AC">【译文】使用Webpack构建你的React生产环境版本</a></li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="【译文】使用Webpack构建你的React生产环境版本"><a href="#【译文】使用Webpack构建你的React生产环境版本" class="headerlink" title="【译文】使用Webpack构建你的React生产环境版本"></a>【译文】使用Webpack构建你的React生产环境版本</h2><blockquote>
<p>文本译自：<a href="http://dev.topheman.com/make-your-react-production-minified-version-with-webpack/" target="_blank" rel="external">Make your own React production version with webpack</a></p>
</blockquote>
<p>如果你用React进行开发，那么就一定见过它冗长的警告。</p>
<p>译者注：下面这段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: It looks like you&apos;re using a minified copy of the development build of React. When deploying React apps to production, make sure to use the production build which skips development warnings and is faster. See https://fb.me/react-minification for more details.</div></pre></td></tr></table></figure>
<p><a href="https://facebook.github.io/react/downloads.html#development-vs.-production-builds" target="_blank" rel="external">React官方这么解释</a>的：</p>
<blockquote>
<p>我们提供两种版本的React：未压缩的开发环境版和压缩的生产环境版本。开发环境的版本涵盖了对普遍错误的警告提示，而生产环境的版本则提供了更好的优化，并忽略了所有警告信息。</p>
</blockquote>
<p>当你在生产环境打包时，不应该包含任何用于开发环境的代码（它们会让webpack进行不必要的检查，并增加包的大小）。</p>
<p>而解决方案则是使用<a href="http://dev.topheman.com/optimize-your-bundles-weight-with-webpack/" target="_blank" rel="external">Webpack.DefinePlugin</a>，或者使用<code>envify</code>（如果你使用<code>browserify</code>）。</p>
<p>通过下面的配置，你可以将<code>process.env.NODE_ENV</code>变量设置为<code>production</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.prod.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">  plugins:[</div><div class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">      <span class="string">'process.env'</span>:&#123;</div><div class="line">        <span class="string">'NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">      <span class="attr">compress</span>:&#123;</div><div class="line">        <span class="attr">warnings</span>: <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的话，就可以将<code>react.min.js</code>用在你的包里了。如果你看过位于<code>./node_modules/react/lib</code>的React源码，你会发现有很多地方使用了类似于<code>process.env.NODE_ENV !== &#39;production&#39;</code>的表达式。这也就是因此我们可以通过修改上面那个变量改变引入的React包的原因。</p>
<p>参考资源：</p>
<ul>
<li><a href="http://dev.topheman.com/optimize-your-bundles-weight-with-webpack/" target="_blank" rel="external">Optimize your bundle’s weight with webpack</a></li>
<li><a href="https://facebook.github.io/react/downloads.html#npm" target="_blank" rel="external">React – recommendation of use</a></li>
<li><a href="https://github.com/topheman/react-es6-redux/blob/master/webpack.config.js" target="_blank" rel="external">Example of webpack.config.js on topheman/react-es6-redux</a></li>
</ul>
<hr>
<p>Notes:</p>
<p>为什么不直接引用<code>react.min.js</code>对象？</p>
<p>通过那样的方式，你依旧使用的是开发版本。有警告，而且需要webpack多余的检查。</p>
<p>同理，我可以直接通过webpack<code>resolve.alias</code>属性，把<code>react</code>指向<code>react.min.js</code>就好了。</p>
<p>这样是完全可以正常工作的。但想一想<code>UglifyJS</code>插件是如何工作的吧。它检查你App里的所有代码进行计算，寻找相似的对象（比如React里或者其他module用的<code>document</code>对象）。因而那样的话<code>UglifyJS</code>就有可能在直接引用<code>react.min.js</code>的时候无法发现那些包（<code>UglifyJS</code>不再检查React包）。</p>
<p>但是，你依旧可以压缩已经压缩了的文件。但是要进行一些繁琐的配置。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="译文" scheme="http://ecmadao.com/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Electron【01】--主进程VS渲染进程&amp;不同页面间共享数据</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Electron/Electron%E3%80%9001%E3%80%91--%E4%B8%BB%E8%BF%9B%E7%A8%8BVS%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B&amp;%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Electron/Electron【01】--主进程VS渲染进程&amp;不同页面间共享数据/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#electron%E3%80%9001%E3%80%91--%E4%B8%BB%E8%BF%9B%E7%A8%8Bvs%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B&amp;%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE">Electron【01】–主进程VS渲染进程&amp;不同页面间共享数据</a><ul>
<li><a href="#%E4%B8%BB%E8%BF%9B%E7%A8%8Bvs%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B">主进程VS渲染进程</a><ul>
<li><a href="#%E4%B8%BB%E8%BF%9B%E7%A8%8B">主进程</a></li>
<li><a href="#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B">渲染进程</a></li>
<li><a href="#%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%92%8C%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%B8%8D%E5%90%8C">主进程和渲染进程的不同</a></li>
</ul>
</li>
<li><a href="#%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE">不同页面间共享数据</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="Electron【01】–主进程VS渲染进程-amp-不同页面间共享数据"><a href="#Electron【01】–主进程VS渲染进程-amp-不同页面间共享数据" class="headerlink" title="Electron【01】–主进程VS渲染进程&amp;不同页面间共享数据"></a>Electron【01】–主进程VS渲染进程&amp;不同页面间共享数据</h2><p>Electron使用了网页页面作为App的GUI，因此你可以将它看做是一个由JavaScript控制的一个小型的Chrome内核浏览器。</p>
<h3 id="主进程VS渲染进程"><a href="#主进程VS渲染进程" class="headerlink" title="主进程VS渲染进程"></a>主进程VS渲染进程</h3><h4 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h4><p>在Electron中，跑<code>package.json</code>里的主脚本的进程叫作主进程。在主进程里跑的脚本可以通过创建web页面的窗口来扮演GUI角色。</p>
<p>主进程看起来就是一段脚本：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>);</div><div class="line"><span class="keyword">const</span> app = electron.app;</div><div class="line"><span class="keyword">const</span> BrowserWindow = electron.BrowserWindow;</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="built_in">window</span> = <span class="literal">null</span>;</div><div class="line"></div><div class="line">app.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;);</div><div class="line">  <span class="built_in">window</span>.loadURL(<span class="string">'https://github.com'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h4><p>正因为Electron使用了chrome内核，才使得它多进程的结构也可以被我们使用。在Electron里的每个页面都有它自己的进程，叫作渲染进程。</p>
<p>在普通的浏览器里，网页页面跑在一个沙盒环境下，不能接触到native源码。而Electron则允许你在页面中使用Node.js的API，较低程度上的和操作系统进行交互。</p>
<p>渲染进程如同传统的HTML，但它可以直接使用Node模块：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    const remote = require('electron').remote;</div><div class="line">    console.log(remote.app.getVersion());</div><div class="line">  &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="主进程和渲染进程的不同"><a href="#主进程和渲染进程的不同" class="headerlink" title="主进程和渲染进程的不同"></a>主进程和渲染进程的不同</h4><p>主进程通过实例化<code>BrowserWindow</code>，每个<code>BrowserWindow</code>实例都在它自己的渲染进程内返回一个web页面。当<code>BrowserWindow</code>实例销毁时，相应的渲染进程也会终止。</p>
<p>主进程负责掌管所有的web页面和它们相应的渲染进程。每个渲染进程都是相互独立的，它们只关心自己所运行的web页面。</p>
<p>在页面（渲染进程）中不允许调用原生GUI相关的API，那是因为在网页（渲染进程）中中掌管原生GUI很危险，易造成内存泄露。如果你想在网页中进行GUI的操作，渲染进程必须向主进程传达请求，然后在主进程中完成操作。</p>
<p>在Electron中，我们有几种连接主进程和渲染进程的方法，例如用于传送消息的<a href="https://github.com/heyunjiang/electron/blob/master/docs/api/ipc-renderer.md" target="_blank" rel="external"><code>ipcRenderer</code></a>和<a href="https://github.com/heyunjiang/electron/blob/master/docs/api/ipc-main.md" target="_blank" rel="external"><code>ipcMain</code></a>模块，以及用于RPC的<a href="https://github.com/heyunjiang/electron/blob/master/docs/api/remote.md" target="_blank" rel="external"><code>remote</code></a>模块。</p>
<h3 id="不同页面间共享数据"><a href="#不同页面间共享数据" class="headerlink" title="不同页面间共享数据"></a>不同页面间共享数据</h3><p>非常简单，使用HTML5 API就能完成。</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage" target="_blank" rel="external"><code>Storage API</code></a>，<a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="external"><code>IndexedDB</code></a>都是很好的选择。</p>
<p>你还可以使用Electron中提供的<code>IPC</code>系统。它在主进程中将一个对象储存为全局变量，然后可以通过<code>remote</code>模块操作它们：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在主进程里</span></div><div class="line">global.sharedObject = &#123;</div><div class="line">  <span class="attr">someProperty</span>: <span class="string">'default value'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In page 1.</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'remote'</span>).getGlobal(<span class="string">'sharedObject'</span>).someProperty = <span class="string">'new value'</span>;</div><div class="line"></div><div class="line"><span class="comment">// In page 2.</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>(<span class="string">'remote'</span>).getGlobal(<span class="string">'sharedObject'</span>).someProperty);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Electron" scheme="http://ecmadao.com/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>使用Electron&amp;React&amp;Webpack构建桌面端App【01】--配置</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Electron/%E4%BD%BF%E7%94%A8Electron&amp;React&amp;Webpack%E6%9E%84%E5%BB%BA%E6%A1%8C%E9%9D%A2%E7%AB%AFApp%E3%80%9001%E3%80%91--%E9%85%8D%E7%BD%AE/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Electron/使用Electron&amp;React&amp;Webpack构建桌面端App【01】--配置/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8electron&amp;react&amp;webpack%E6%9E%84%E5%BB%BA%E6%A1%8C%E9%9D%A2%E7%AB%AFapp%E3%80%9001%E3%80%91--%E9%85%8D%E7%BD%AE">使用Electron&amp;React&amp;Webpack构建桌面端App【01】–配置</a><ul>
<li><a href="#intro">intro</a></li>
<li><a href="#webpack--electron">webpack + electron</a><ul>
<li><a href="#webpack--electron-%E7%9A%84%E9%97%AE%E9%A2%98">webpack + electron 的问题</a><ul>
<li><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%881%EF%BC%9A">解决方案1：</a></li>
<li><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%882%EF%BC%9A">解决方案2：</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#setup">setup</a><ul>
<li><a href="#react">React</a></li>
<li><a href="#redux">Redux</a></li>
<li><a href="#%E6%90%AD%E5%BB%BA%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">搭建目录结构</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="使用Electron-amp-React-amp-Webpack构建桌面端App【01】–配置"><a href="#使用Electron-amp-React-amp-Webpack构建桌面端App【01】–配置" class="headerlink" title="使用Electron&amp;React&amp;Webpack构建桌面端App【01】–配置"></a>使用Electron&amp;React&amp;Webpack构建桌面端App【01】–配置</h2><h3 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h3><p>对于Electron的学习，什么也不比<a href="https://github.com/electron/electron/tree/master/docs-translations/zh-CN" target="_blank" rel="external">官方文档</a>+<a href="https://github.com/sindresorhus/awesome-electron#documentation" target="_blank" rel="external">开源项目代码</a>来的痛快</p>
<p>先看下<a href="http://electron.atom.io/" target="_blank" rel="external">官网</a>，按照上面的Quick Start走：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Clone the Quick Start repository</span></div><div class="line">$ git <span class="built_in">clone</span> https://github.com/electron/electron-quick-start</div><div class="line"></div><div class="line"><span class="comment"># Go into the repository</span></div><div class="line">$ <span class="built_in">cd</span> electron-quick-start</div><div class="line"></div><div class="line"><span class="comment"># Install the dependencies and run</span></div><div class="line">$ npm install &amp;&amp; npm start</div></pre></td></tr></table></figure>
<p>目录结构：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">|--index.html <span class="comment"># 控制首屏UI</span></div><div class="line">|--renderer.js <span class="comment"># 渲染线程</span></div><div class="line">|--main.js <span class="comment"># 总入口</span></div><div class="line">|--package.json</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"><span class="comment">// app用于控制应用的生命周期</span></div><div class="line"><span class="keyword">const</span> app = electron.app</div><div class="line"><span class="comment">// BrowserWindow用于生成一个原生的窗口</span></div><div class="line"><span class="keyword">const</span> BrowserWindow = electron.BrowserWindow</div><div class="line"><span class="comment">// 创建一个全局的窗口对象变量，并在接下来的初始化窗口函数中赋值。通过这样的方式我们可以保持对窗口对象的引用，以免垃圾回收导致应用退出</span></div><div class="line"><span class="keyword">let</span> mainWindow</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 创建主窗口，加载资源文件URL（html文件或一个网址）</span></div><div class="line">  <span class="comment">// 在这个官方例子里加载了index.html</span></div><div class="line">  <span class="comment">// 并定义当主窗口关闭时的回调函数</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">app.on(<span class="string">'ready'</span>, createWindow)</div><div class="line">app.on(<span class="string">'window-all-closed'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;) <span class="comment">// 全部窗口关闭时的回调</span></div><div class="line">app.on(<span class="string">'active'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 在mac平台上，当点击dock icon的时候，如果没有其他窗口的话则新建主窗口</span></div><div class="line">  <span class="keyword">if</span>(mainWindow === <span class="literal">null</span>)createWindow();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--index.html--&gt;</span></div><div class="line"><span class="comment">&lt;!--...省略一些HTML代码--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">require</span>(<span class="string">'./renderer.js'</span>) <span class="comment">// 在这里render渲染进程</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// renderer.js</span></div><div class="line"><span class="comment">// 在这里可以使用Node.js API</span></div><div class="line"><span class="comment">// 例如，可以调用渲染进程的专用API，如remote（用于在主进程和渲染进程间建立联系，并可获取当前窗口），clipboard（用于粘贴渲染进程的相应文字）</span></div></pre></td></tr></table></figure>
<p>在进一步之前，建议先戳这里：</p>
<p><a href="https://github.com/ecmadao/Coding-Guide/blob/master/Notes/Electron/Electron%E3%80%9001%E3%80%91--%E4%B8%BB%E8%BF%9B%E7%A8%8BVS%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%26%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE.md" target="_blank" rel="external">Electron【01】–主进程VS渲染进程&amp;不同页面间共享数据</a></p>
<p>和这里：</p>
<p><a href="https://github.com/ecmadao/Coding-Guide/blob/master/Notes/Electron/Electron%E3%80%9002%E3%80%91--%E7%AC%AC%E4%B8%80%E4%B8%AAElectron%20App.md" target="_blank" rel="external">Electron【02】–第一个Electron App</a></p>
<p>加深一下了解。然后我们就开始吧。Electron + React + Webpack构建桌面端App。</p>
<p>使用上面根据官方QuickStart获取的内容，进行进一步的构建。</p>
<p>首先来让我们引入 Webpack + React的环境搭配，戳这篇：</p>
<p><a href="https://segmentfault.com/a/1190000005110967" target="_blank" rel="external">Webpack配置从零到一</a></p>
<p>里面记录了自己搭建webpack时的常用配置，以及配合React+Redux时安装和设置。</p>
<p>React搭配Webpack时，关于<code>production</code>和<code>development</code>需要注意的点：</p>
<p><a href="http://dev.topheman.com/make-your-react-production-minified-version-with-webpack/" target="_blank" rel="external">Make your own React production version with webpack</a></p>
<h3 id="webpack-electron"><a href="#webpack-electron" class="headerlink" title="webpack + electron"></a>webpack + electron</h3><h5 id="webpack-electron-的问题"><a href="#webpack-electron-的问题" class="headerlink" title="webpack + electron 的问题"></a>webpack + electron 的问题</h5><p>配好webpack，先不急搭建目录。先使用根目录下的<code>renderer.js</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// renderer.js</span></div><div class="line"><span class="comment">// remote用于在主进程和渲染进程之间建立联系</span></div><div class="line"><span class="comment">// clipboard可以提供复制文本的功能</span></div><div class="line"><span class="keyword">import</span> &#123;clipboard, remote&#125; <span class="keyword">from</span> <span class="string">'electron'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 例如，你可以用remote获取当前的窗口</span></div><div class="line"><span class="keyword">let</span> currentWindow = remote.getCurrentWindow();</div><div class="line"><span class="built_in">console</span>.log(currentWindow); <span class="comment">// It's an Object</span></div></pre></td></tr></table></figure>
<p>然后以<code>renderer.js</code>作为webpack<code>entry</code>中的入口：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//config/webpack.config.js</span></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">renderer</span>: <span class="string">'renderer.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: BUILD_PATH, <span class="comment">// 设置输出目录</span></div><div class="line">    filename: <span class="string">'[name].bundle.js'</span>, <span class="comment">// 输出文件名</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后再改下<code>index.html</code>，把之前引用的<code>require(&#39;./renderer.js&#39;)</code>改为<code>require(&#39;./assets/renderer.bundle.js&#39;)</code></p>
<p>运行webpack，就会发现直接报错：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Module not found: Error: Cannot resolve module <span class="string">'electron'</span> <span class="keyword">in</span> /Users/ecmadao1/Dev/Electron-OpenSourceApp/electron-quick-start</div></pre></td></tr></table></figure>
<h4 id="解决方案1："><a href="#解决方案1：" class="headerlink" title="解决方案1："></a>解决方案1：</h4><p>在webpack中配置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">externals</span>: [</div><div class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> IGNORES = [</div><div class="line">        <span class="string">'electron'</span></div><div class="line">      ];</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">context, request, callback</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (IGNORES.indexOf(request) &gt;= <span class="number">0</span>) &#123;</div><div class="line">          <span class="keyword">return</span> callback(<span class="literal">null</span>, <span class="string">"require('"</span> + request + <span class="string">"')"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> callback();</div><div class="line">      &#125;;</div><div class="line">    &#125;)()</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解决方案2："><a href="#解决方案2：" class="headerlink" title="解决方案2："></a>解决方案2：</h4><p>所有<code>require(&#39;electron&#39;)</code>的地方全部改为<code>window.require(&#39;electron&#39;)</code></p>
<h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install react --save</div><div class="line">$ npm install react-dom --save</div></pre></td></tr></table></figure>
<h4 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install --save redux <span class="comment"># redux</span></div><div class="line">$ npm install --save react-redux <span class="comment"># 和React配合</span></div><div class="line">$ npm install --save redux-thunk <span class="comment"># middleware</span></div></pre></td></tr></table></figure>
<h4 id="搭建目录结构"><a href="#搭建目录结构" class="headerlink" title="搭建目录结构"></a>搭建目录结构</h4><p>改变目录结构如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">|--app</div><div class="line">|----Components <span class="comment"># react组件都扔在这里</span></div><div class="line">|----Redux <span class="comment"># redux负责组件的函数逻辑和state更新</span></div><div class="line">|------actions</div><div class="line">|------reducers</div><div class="line">|----View <span class="comment"># html文件扔这里</span></div><div class="line">|------index.html</div><div class="line">|----Page <span class="comment"># 各个页面对应的相关资源</span></div><div class="line">|------image</div><div class="line">|------js</div><div class="line">|------stylesheet</div><div class="line">|--assets <span class="comment"># 打包好以后的资源在这儿</span></div><div class="line">|--config</div><div class="line">|----webpack.config.js <span class="comment"># webpack配置</span></div><div class="line">|--package.json</div><div class="line">|--main.js <span class="comment"># Electron App的入口文件</span></div></pre></td></tr></table></figure>
<hr>
<p>初步的搭建目前就算完成了。接下来该做什么具体的App呢。。我先想一会儿去==</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Electron" scheme="http://ecmadao.com/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Think in Elm</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Elm/Think%20in%20Elm/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Elm/Think in Elm/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#think-in-elm">Think in Elm</a><ul>
<li><a href="#%E5%9F%BA%E7%A1%80%E7%BB%84%E6%88%90">基础组成</a><ul>
<li><a href="#counter-example%EF%BC%9A">Counter Example：</a></li>
<li><a href="#input-example">Input Example</a></li>
<li><a href="#update">Update</a></li>
</ul>
</li>
<li><a href="#%E6%B7%B7%E5%90%88%E5%AE%9E%E4%BE%8B">混合实例</a><ul>
<li><a href="#%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%8D%95">注册表单</a></li>
</ul>
</li>
<li><a href="#advance">Advance</a><ul>
<li><a href="#subscriptions">subscriptions</a><ul>
<li><a href="#example-">example :</a></li>
</ul>
</li>
<li><a href="#commands">Commands</a><ul>
<li><a href="#example--%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0">example–生成随机数</a></li>
</ul>
</li>
<li><a href="#tasks">Tasks</a></li>
<li><a href="#import-&amp;-module">import &amp; module</a></li>
</ul>
</li>
<li><a href="#%E7%94%9F%E6%88%90html">生成HTML</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="Think-in-Elm"><a href="#Think-in-Elm" class="headerlink" title="Think in Elm"></a>Think in Elm</h2><p><img src="/images/elm-application-flow.png" alt="Elm Application Flow"></p>
<h3 id="基础组成"><a href="#基础组成" class="headerlink" title="基础组成"></a>基础组成</h3><p>Elm的基本概念由Model, Update, View三者组成：</p>
<blockquote>
<p>Model — the state of your application</p>
<p>Update — a way to update your state. composed by messages &amp; update</p>
<p>iew — a way to view your state as HTML</p>
</blockquote>
<p><a href="http://www.elm-tutorial.org/en/02-elm-arch/02-structure.html" target="_blank" rel="external">Elm structure</a></p>
<h4 id="Counter-Example："><a href="#Counter-Example：" class="headerlink" title="Counter Example："></a>Counter Example：</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Html <span class="keyword">exposing</span> (..)</div><div class="line"><span class="keyword">import</span> Html.Attributes <span class="keyword">exposing</span> (..)</div><div class="line"><span class="keyword">import</span> Html.Events <span class="keyword">exposing</span> (onClick)</div><div class="line"><span class="keyword">import</span> Html.App <span class="keyword">as</span> App</div><div class="line"></div><div class="line"><span class="comment">-- Model，App state</span></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">Model</span> = <span class="type">Int</span></div><div class="line"><span class="title">initModel</span> : <span class="type">Model</span></div><div class="line"><span class="title">initModel</span> = <span class="number">999</span></div><div class="line"></div><div class="line"><span class="comment">-- update the way you can update your state</span></div><div class="line"></div><div class="line"><span class="comment">-- define messages type</span></div><div class="line"><span class="keyword">type</span> <span class="type">Msg</span> = <span class="type">Increment</span> | <span class="type">Decrement</span></div><div class="line"></div><div class="line"><span class="comment">-- define update func</span></div><div class="line"><span class="title">update</span> : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; <span class="type">Model</span></div><div class="line"><span class="title">update</span> msg model =</div><div class="line">  <span class="keyword">case</span> msg <span class="keyword">of</span></div><div class="line">    <span class="type">Increment</span> -&gt;</div><div class="line">      model + <span class="number">1</span></div><div class="line">    <span class="type">Decrement</span> -&gt;</div><div class="line">      model - <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">-- view, render as html</span></div><div class="line"><span class="title">view</span>: <span class="type">Model</span> -&gt; <span class="type">Html</span> <span class="type">Msg</span></div><div class="line"><span class="title">view</span> model =</div><div class="line">  div [class <span class="string">"model_container"</span>]</div><div class="line">    [ button [onClick <span class="type">Decrement</span>] [text <span class="string">"-"</span>]</div><div class="line">    , text (toString model)</div><div class="line">    , button [onClick <span class="type">Increment</span>] [text <span class="string">"+"</span>]</div><div class="line">    ]</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="type">App</span>.beginnerProgram &#123;model = initModel, view = view, update = update&#125;</div></pre></td></tr></table></figure>
<h4 id="Input-Example"><a href="#Input-Example" class="headerlink" title="Input Example"></a>Input Example</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Html <span class="keyword">exposing</span> (<span class="type">Html</span>, <span class="type">Attribute</span>, text, div, input)</div><div class="line"><span class="keyword">import</span> Html.App <span class="keyword">exposing</span> (beginnerProgram)</div><div class="line"><span class="keyword">import</span> Html.Attributes <span class="keyword">exposing</span> (..)</div><div class="line"><span class="keyword">import</span> Html.Events <span class="keyword">exposing</span> (onInput)</div><div class="line"><span class="keyword">import</span> String</div><div class="line"></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">Model</span> = <span class="type">String</span></div><div class="line"></div><div class="line"><span class="title">initModel</span>: <span class="type">Model</span></div><div class="line"><span class="title">initModel</span> = <span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> <span class="type">Msg</span> = <span class="type">NewContent</span> <span class="type">String</span></div><div class="line"></div><div class="line"><span class="title">update</span>: <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; <span class="type">Model</span></div><div class="line"><span class="title">update</span> msg model =</div><div class="line">  <span class="keyword">case</span> msg <span class="keyword">of</span></div><div class="line">    <span class="type">NewContent</span> content -&gt;</div><div class="line">      content</div><div class="line"></div><div class="line"><span class="title">view</span> model =</div><div class="line">  div []</div><div class="line">    [</div><div class="line">      input [onInput <span class="type">NewContent</span>, placeholder <span class="string">"placeholder"</span>] [],</div><div class="line">      div [] [text model]</div><div class="line">    ]</div><div class="line"></div><div class="line"><span class="title">main</span> = beginnerProgram &#123;model = initModel, view = view, update = update&#125;</div></pre></td></tr></table></figure>
<h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 定义操作类型</span></div><div class="line"><span class="keyword">type</span> <span class="type">Msg</span> = <span class="type">Increment</span> | <span class="type">Decrement</span></div><div class="line"><span class="comment">-- or</span></div><div class="line"><span class="keyword">type</span> <span class="type">Operation</span> = <span class="type">Increment</span> | <span class="type">Decrement</span> | <span class="type">Reset</span></div><div class="line"><span class="comment">-- or</span></div><div class="line"><span class="keyword">type</span> <span class="type">Bool</span> = <span class="type">True</span> | <span class="type">False</span></div></pre></td></tr></table></figure>
<p>定义的Msg，Operation叫作Union type，用来表示一组可能的值。它的名称可以自己定义，但要大写开头。<br>类型的可能的值叫作Tag</p>
<p><strong>Tag也可以是一个接受参数的函数</strong>，例如：</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> <span class="type">Msg</span></div><div class="line">  = <span class="type">Change</span> <span class="type">String</span></div><div class="line"></div><div class="line"><span class="type">Change</span>: <span class="type">String</span> -&gt; <span class="type">String</span></div></pre></td></tr></table></figure>
<p>定义类型如何改变数据：</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 定义类型如何改变数据</span></div><div class="line"><span class="comment">-- 该update方法接受operation和state作为参数</span></div><div class="line"><span class="title">update</span> operation state =</div><div class="line">  <span class="keyword">case</span> operation <span class="keyword">of</span></div><div class="line">    <span class="type">Increment</span> -&gt;</div><div class="line">      state + <span class="number">1</span></div><div class="line">    <span class="type">Decrement</span> -&gt;</div><div class="line">      state - <span class="number">1</span></div><div class="line">    <span class="type">Reset</span> -&gt;</div><div class="line">      <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">-- view</span></div><div class="line"><span class="title">view</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> <span class="type">Msg</span></div><div class="line"><span class="title">view</span> model =</div><div class="line">  div []</div><div class="line">    [ input [ placeholder <span class="string">"Text to reverse"</span>, onInput <span class="type">Change</span> ] []</div><div class="line">    , div [] [ text (<span class="type">String</span>.reverse model.content) ]</div><div class="line">    ]</div></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- model</span></div><div class="line"><span class="comment">-- Model的类型是一个record</span></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">Model</span> =</div><div class="line">  &#123; content : <span class="type">String</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="title">model</span> : <span class="type">Model</span></div><div class="line"><span class="title">model</span> =</div><div class="line">  &#123; content = <span class="string">""</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">-- update</span></div><div class="line"><span class="comment">-- tag是Change String，其中Change接受String类型作为参数，并返回Model类型</span></div><div class="line"><span class="keyword">type</span> <span class="type">Msg</span></div><div class="line">  = <span class="type">Change</span> <span class="type">String</span></div><div class="line"></div><div class="line"><span class="title">update</span> : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; <span class="type">Model</span></div><div class="line"><span class="title">update</span> msg model =</div><div class="line">  <span class="keyword">case</span> msg <span class="keyword">of</span></div><div class="line">    <span class="type">Change</span> newContent -&gt;</div><div class="line">      &#123; model | content = newContent &#125; <span class="comment">-- 更新record类型的model中的content key</span></div></pre></td></tr></table></figure>
<h3 id="混合实例"><a href="#混合实例" class="headerlink" title="混合实例"></a>混合实例</h3><h4 id="注册表单"><a href="#注册表单" class="headerlink" title="注册表单"></a>注册表单</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Html <span class="keyword">exposing</span> (..)</div><div class="line"><span class="keyword">import</span> Html.App <span class="keyword">as</span> App</div><div class="line"><span class="keyword">import</span> Html.Attributes <span class="keyword">exposing</span> (..)</div><div class="line"><span class="keyword">import</span> Html.Events <span class="keyword">exposing</span> (onInput)</div><div class="line"></div><div class="line"><span class="title">main</span> =</div><div class="line">  <span class="type">App</span>.beginnerProgram</div><div class="line">    &#123; model = model</div><div class="line">    , view = view</div><div class="line">    , update = update</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">-- MODEL</span></div><div class="line"></div><div class="line"><span class="comment">-- 定义model别名为Model</span></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">Model</span> =</div><div class="line">  &#123; name : <span class="type">String</span></div><div class="line">  , password : <span class="type">String</span></div><div class="line">  , passwordAgain : <span class="type">String</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="title">model</span> : <span class="type">Model</span></div><div class="line"><span class="comment">-- 调用Record生成一个实例</span></div><div class="line"><span class="comment">-- &#123;name = "", password = "", passwordAgain = ""&#125;</span></div><div class="line"><span class="title">model</span> =</div><div class="line">  <span class="type">Model</span> <span class="string">""</span> <span class="string">""</span> <span class="string">""</span></div><div class="line"></div><div class="line"><span class="comment">-- UPDATE</span></div><div class="line"></div><div class="line"><span class="comment">-- 定义Tag</span></div><div class="line"><span class="keyword">type</span> <span class="type">Msg</span></div><div class="line">    = <span class="type">Name</span> <span class="type">String</span></div><div class="line">    | <span class="type">Password</span> <span class="type">String</span></div><div class="line">    | <span class="type">PasswordAgain</span> <span class="type">String</span></div><div class="line"></div><div class="line"><span class="title">update</span> : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; <span class="type">Model</span></div><div class="line"><span class="title">update</span> msg model =</div><div class="line">  <span class="keyword">case</span> msg <span class="keyword">of</span></div><div class="line">    <span class="type">Name</span> name -&gt;</div><div class="line">      &#123; model | name = name &#125;</div><div class="line"></div><div class="line">    <span class="type">Password</span> password -&gt;</div><div class="line">      &#123; model | password = password &#125;</div><div class="line"></div><div class="line">    <span class="type">PasswordAgain</span> password -&gt;</div><div class="line">      &#123; model | passwordAgain = password &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">-- VIEW</span></div><div class="line"></div><div class="line"><span class="title">view</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> <span class="type">Msg</span></div><div class="line"><span class="title">view</span> model =</div><div class="line">  div []</div><div class="line">    [ input [ <span class="keyword">type</span>' "text", placeholder "<span class="type">Name</span>", onInput <span class="type">Name</span> ] []</div><div class="line">    , input [ <span class="keyword">type</span>' "password", placeholder "<span class="type">Password</span>", onInput <span class="type">Password</span> ] []</div><div class="line">    , input [ <span class="keyword">type</span>' "password", placeholder "<span class="type">Re</span>-enter <span class="type">Password</span>", onInput <span class="type">PasswordAgain</span> ] []</div><div class="line">    , viewValidation model</div><div class="line">    ]</div><div class="line"></div><div class="line"></div><div class="line"><span class="title">viewValidation</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> msg</div><div class="line"><span class="title">viewValidation</span> model =</div><div class="line">  <span class="keyword">let</span></div><div class="line">    (color, message) =</div><div class="line">      <span class="keyword">if</span> model.password == model.passwordAgain <span class="keyword">then</span></div><div class="line">        (<span class="string">"green"</span>, <span class="string">"OK"</span>)</div><div class="line">      <span class="keyword">else</span></div><div class="line">        (<span class="string">"red"</span>, <span class="string">"Passwords do not match!"</span>)</div><div class="line">  <span class="keyword">in</span></div><div class="line">    div [ style [(<span class="string">"color"</span>, color)] ] [ text message ]</div></pre></td></tr></table></figure>
<h3 id="Advance"><a href="#Advance" class="headerlink" title="Advance"></a>Advance</h3><h4 id="subscriptions"><a href="#subscriptions" class="headerlink" title="subscriptions"></a>subscriptions</h4><blockquote>
<p>using subscriptions is how your application can listen for external input. Some examples are:<br>Keyboard events,<br>Mouse movements,<br>Browser locations changes,<br>Websocket events</p>
</blockquote>
<p>在Elm中，使用<code>subscriptions</code>来监听应用的一些事件，例如键盘响应、鼠标移动、浏览器URL变化、websocket事件等等，并使用<code>Commands</code>对事件进行处理。</p>
<blockquote>
<p>A Cmd can be one or a collection of things to do. We use commands to gather all the things that need to happen and hand them to the runtime. Then the runtime will execute them and feed the results back to the application</p>
</blockquote>
<p><code>subscriptions</code>要和<code>cmd</code>搭配使用，在使用之后，之前的<code>MUV</code>结构变为<code>MSUV</code>结构。并且Update函数返回的不再仅仅是Model，是<code>Model + Cmd Msg</code></p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- MODEL</span></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">Model</span> =</div><div class="line">  &#123; ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">-- SUBSCRIPTIONS</span></div><div class="line"><span class="comment">-- subscriptions接受model作为参数，在内部声明了要监听的事件，并返回Msg Value，之后传入UPDATE方法</span></div><div class="line"><span class="title">subscriptions</span> : <span class="type">Model</span> -&gt; <span class="type">Sub</span> <span class="type">Msg</span></div><div class="line"><span class="title">subscriptions</span> model =</div><div class="line">  ...</div><div class="line"></div><div class="line"><span class="comment">-- UPDATE</span></div><div class="line"><span class="keyword">type</span> <span class="type">Msg</span> = <span class="type">Submit</span> | ...</div><div class="line"></div><div class="line"><span class="title">update</span> : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; (<span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span>)</div><div class="line"><span class="title">update</span> msg model =</div><div class="line">  ...</div><div class="line"></div><div class="line"><span class="comment">-- VIEW</span></div><div class="line"><span class="title">view</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> <span class="type">Msg</span></div><div class="line"><span class="title">view</span> model =</div><div class="line">  ...</div><div class="line"></div><div class="line"><span class="comment">-- INIT</span></div><div class="line"><span class="title">init</span> : (<span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span>)</div><div class="line"><span class="title">init</span> =</div><div class="line">  ...</div></pre></td></tr></table></figure>
<h5 id="example"><a href="#example" class="headerlink" title="example :"></a>example :</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Html <span class="keyword">exposing</span> (<span class="type">Html</span>, div, text)</div><div class="line"><span class="keyword">import</span> Html.App</div><div class="line"><span class="keyword">import</span> Mouse</div><div class="line"><span class="keyword">import</span> Keyboard</div><div class="line"></div><div class="line"><span class="comment">-- MODEL</span></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">Model</span> =</div><div class="line">    <span class="type">Int</span></div><div class="line"><span class="title">init</span> : ( <span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span> )</div><div class="line"><span class="title">init</span> =</div><div class="line">    ( <span class="number">0</span>, <span class="type">Cmd</span>.none )</div><div class="line"></div><div class="line"><span class="comment">-- MESSAGES</span></div><div class="line"><span class="keyword">type</span> <span class="type">Msg</span></div><div class="line">    = <span class="type">MouseMsg</span> <span class="type">Mouse</span>.<span class="type">Position</span></div><div class="line">    | <span class="type">KeyMsg</span> <span class="type">Keyboard</span>.<span class="type">KeyCode</span></div><div class="line"><span class="comment">-- 监听两种消息MouseMsg、KeyMsg。会在鼠标/键盘操作的时候触发相应的监听事件</span></div><div class="line"></div><div class="line"><span class="comment">-- UPDATE</span></div><div class="line"><span class="title">update</span> : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; ( <span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span> )</div><div class="line"><span class="title">update</span> msg model =</div><div class="line">    <span class="keyword">case</span> msg <span class="keyword">of</span></div><div class="line">        <span class="type">MouseMsg</span> position -&gt;</div><div class="line">            ( model + <span class="number">1</span>, <span class="type">Cmd</span>.none )</div><div class="line">        <span class="type">KeyMsg</span> code -&gt;</div><div class="line">            ( model + <span class="number">2</span>, <span class="type">Cmd</span>.none )</div><div class="line"><span class="comment">-- update函数必须多返回一个Cmd</span></div><div class="line"><span class="comment">-- Cmd.none代表没有命令，什么也不需要做</span></div><div class="line"></div><div class="line"><span class="comment">-- SUBSCRIPTIONS</span></div><div class="line"><span class="title">subscriptions</span> : <span class="type">Model</span> -&gt; <span class="type">Sub</span> <span class="type">Msg</span></div><div class="line"><span class="title">subscriptions</span> model =</div><div class="line">    <span class="type">Sub</span>.batch</div><div class="line">        [ <span class="type">Mouse</span>.clicks <span class="type">MouseMsg</span></div><div class="line">        , <span class="type">Keyboard</span>.presses <span class="type">KeyMsg</span></div><div class="line">        ]</div><div class="line"><span class="comment">-- 声明要监听的事件。它们(Mouse.clicks/Keyboard.presses)接受Msg作为参数并返回</span></div><div class="line"><span class="comment">-- 使用Sub.batch监听多个事件</span></div><div class="line"></div><div class="line"><span class="comment">-- VIEW</span></div><div class="line"><span class="title">view</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> <span class="type">Msg</span></div><div class="line"><span class="title">view</span> model =</div><div class="line">    div []</div><div class="line">        [ text (toString model) ]</div><div class="line"></div><div class="line"><span class="comment">-- MAIN</span></div><div class="line"><span class="title">main</span> : <span class="type">Program</span> <span class="type">Never</span></div><div class="line"><span class="title">main</span> =</div><div class="line">    <span class="type">Html</span>.<span class="type">App</span>.program</div><div class="line">        &#123; init = init</div><div class="line">        , view = view</div><div class="line">        , update = update</div><div class="line">        , subscriptions = subscriptions</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p><a href="http://guide.elm-lang.org/architecture/effects/random.html" target="_blank" rel="external">Random案例</a></p>
<h4 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h4><blockquote>
<p>commands (Cmd) are how we tell the runtime to execute things that involve side effects</p>
</blockquote>
<p>我们使用cmd来处理需要在程序中运行并需要被处理的事件。在处理完成之后程序会将结果返还给应用。</p>
<p>例如：</p>
<ul>
<li>生成随机数</li>
<li>http请求</li>
<li>储存数据</li>
</ul>
<h5 id="example–生成随机数"><a href="#example–生成随机数" class="headerlink" title="example–生成随机数"></a>example–生成随机数</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> Main <span class="keyword">exposing</span> (..)</div><div class="line"></div><div class="line"><span class="keyword">import</span> Html <span class="keyword">exposing</span> (<span class="type">Html</span>, div, button, text)</div><div class="line"><span class="keyword">import</span> Html.Events <span class="keyword">exposing</span> (onClick)</div><div class="line"><span class="keyword">import</span> Html.App</div><div class="line"><span class="keyword">import</span> Random</div><div class="line"></div><div class="line"><span class="comment">-- MODEL</span></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">Model</span> =</div><div class="line">    <span class="type">Int</span></div><div class="line"><span class="title">init</span> : ( <span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span> )</div><div class="line"><span class="title">init</span> =</div><div class="line">    ( <span class="number">1</span>, <span class="type">Cmd</span>.none )</div><div class="line"></div><div class="line"><span class="comment">-- MESSAGES</span></div><div class="line"><span class="keyword">type</span> <span class="type">Msg</span></div><div class="line">    = <span class="type">Roll</span></div><div class="line">    | <span class="type">OnResult</span> <span class="type">Int</span></div><div class="line"><span class="comment">-- OnResult 用来从Random库中获取一个随机数</span></div><div class="line">    </div><div class="line"><span class="comment">-- VIEW</span></div><div class="line"><span class="title">view</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> <span class="type">Msg</span></div><div class="line"><span class="title">view</span> model =</div><div class="line">    div []</div><div class="line">        [ button [ onClick <span class="type">Roll</span> ] [ text <span class="string">"Roll"</span> ]</div><div class="line">        , text (toString model)</div><div class="line">        ]</div><div class="line"></div><div class="line"><span class="comment">-- UPDATE</span></div><div class="line"><span class="title">update</span> : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; ( <span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span> )</div><div class="line"><span class="title">update</span> msg model =</div><div class="line">    <span class="keyword">case</span> msg <span class="keyword">of</span></div><div class="line">        <span class="type">Roll</span> -&gt;</div><div class="line">            ( model, <span class="type">Random</span>.generate <span class="type">OnResult</span> (<span class="type">Random</span>.int <span class="number">1</span> <span class="number">6</span>) )</div><div class="line">        <span class="type">OnResult</span> res -&gt;</div><div class="line">            ( res, <span class="type">Cmd</span>.none )</div><div class="line"></div><div class="line"><span class="comment">-- MAIN</span></div><div class="line"><span class="title">main</span> : <span class="type">Program</span> <span class="type">Never</span></div><div class="line"><span class="title">main</span> =</div><div class="line">    <span class="type">Html</span>.<span class="type">App</span>.program</div><div class="line">        &#123; init = init</div><div class="line">        , view = view</div><div class="line">        , update = update</div><div class="line">        , subscriptions = (always <span class="type">Sub</span>.none)</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p><strong>IMPORTANT</strong></p>
<blockquote>
<p>But commands don’t have a concept of success or failure. They also don’t have the concept of sequencing. Commands are just bags of things to do.</p>
</blockquote>
<h4 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h4><p>鉴于commands并不知道任务返回的结果是成功还是失败，而且也没有对立的概念。因此，我们使用task来进行异步操作，它就像是js中的Promise</p>
<p>task的signature：</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Task</div><div class="line"></div><div class="line"><span class="comment">-- 第一个参数代表失败值，第二个参数代表成功时的回调</span></div><div class="line"><span class="type">Task</span> errorValue successValue</div><div class="line"></div><div class="line"><span class="comment">-- example</span></div><div class="line"><span class="comment">-- fails with an Http.Error or succeeds with a String</span></div><div class="line"><span class="type">Task</span> <span class="type">Http</span>.<span class="type">Error</span> <span class="type">String</span></div><div class="line"></div><div class="line"><span class="comment">-- a task that never fails, and always succeeds with a Result</span></div><div class="line"><span class="type">Task</span> <span class="type">Never</span> <span class="type">Result</span></div></pre></td></tr></table></figure>
<p><em>举个栗子：</em></p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> Main <span class="keyword">exposing</span> (..)</div><div class="line"></div><div class="line"><span class="keyword">import</span> Html <span class="keyword">exposing</span> (<span class="type">Html</span>, div, button, text)</div><div class="line"><span class="keyword">import</span> Html.Events <span class="keyword">exposing</span> (onClick)</div><div class="line"><span class="keyword">import</span> Html.App</div><div class="line"><span class="keyword">import</span> Http</div><div class="line"><span class="keyword">import</span> Task <span class="keyword">exposing</span> (<span class="type">Task</span>)</div><div class="line"><span class="keyword">import</span> Json.Decode <span class="keyword">as</span> Decode</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">-- MODEL</span></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">Model</span> =</div><div class="line">    <span class="type">String</span></div><div class="line"><span class="title">init</span> : ( <span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span> )</div><div class="line"><span class="title">init</span> =</div><div class="line">    ( <span class="string">""</span>, <span class="type">Cmd</span>.none )</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">-- MESSAGES</span></div><div class="line"><span class="keyword">type</span> <span class="type">Msg</span></div><div class="line">    = <span class="type">Fetch</span></div><div class="line">    | <span class="type">FetchSuccess</span> <span class="type">String</span></div><div class="line">    | <span class="type">FetchError</span> <span class="type">Http</span>.<span class="type">Error</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">-- VIEW</span></div><div class="line"><span class="title">view</span> : <span class="type">Model</span> -&gt; <span class="type">Html</span> <span class="type">Msg</span></div><div class="line"><span class="title">view</span> model =</div><div class="line">    div []</div><div class="line">        [ button [ onClick <span class="type">Fetch</span> ] [ text <span class="string">"Fetch"</span> ]</div><div class="line">        , text model</div><div class="line">        ]</div><div class="line"></div><div class="line"><span class="title">decode</span> : <span class="type">Decode</span>.<span class="type">Decoder</span> <span class="type">String</span></div><div class="line"><span class="title">decode</span> =</div><div class="line">    <span class="type">Decode</span>.at [ <span class="string">"name"</span> ] <span class="type">Decode</span>.string</div><div class="line"></div><div class="line"><span class="title">url</span> : <span class="type">String</span></div><div class="line"><span class="title">url</span> =</div><div class="line">    <span class="string">"http://swapi.co/api/planets/1/?format=json"</span></div><div class="line"></div><div class="line"><span class="comment">-- fetchTask: takes a decoder and a url and returns a task.</span></div><div class="line"><span class="title">fetchTask</span> : <span class="type">Task</span> <span class="type">Http</span>.<span class="type">Error</span> <span class="type">String</span></div><div class="line"><span class="title">fetchTask</span> =</div><div class="line">    <span class="type">Http</span>.get decode url</div><div class="line"></div><div class="line"><span class="comment">-- use Task.perform to transform a task into a command</span></div><div class="line"><span class="title">fetchCmd</span> : <span class="type">Cmd</span> <span class="type">Msg</span></div><div class="line"><span class="title">fetchCmd</span> =</div><div class="line">    <span class="type">Task</span>.perform <span class="type">FetchError</span> <span class="type">FetchSuccess</span> fetchTask</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">-- UPDATE</span></div><div class="line"><span class="title">update</span> : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; ( <span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span> )</div><div class="line"><span class="title">update</span> msg model =</div><div class="line">    <span class="keyword">case</span> msg <span class="keyword">of</span></div><div class="line">        <span class="type">Fetch</span> -&gt;</div><div class="line">            ( model, fetchCmd )</div><div class="line">        <span class="type">FetchSuccess</span> name -&gt;</div><div class="line">            ( name, <span class="type">Cmd</span>.none )</div><div class="line">        <span class="type">FetchError</span> error -&gt;</div><div class="line">            ( toString error, <span class="type">Cmd</span>.none )</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">-- MAIN</span></div><div class="line"><span class="title">main</span> : <span class="type">Program</span> <span class="type">Never</span></div><div class="line"><span class="title">main</span> =</div><div class="line">    <span class="type">Html</span>.<span class="type">App</span>.program</div><div class="line">        &#123; init = init</div><div class="line">        , view = view</div><div class="line">        , update = update</div><div class="line">        , subscriptions = (always <span class="type">Sub</span>.none)</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p><a href="http://guide.elm-lang.org/architecture/effects/http.html" target="_blank" rel="external">http请求</a></p>
<p><em>Task &amp; unit type</em></p>
<p>上面已经说过，一个典型的Task有 errorValue 和 successValue：</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="type">Task</span> errorValue successValue</div><div class="line"><span class="comment">-- 如果想要忽略error</span></div><div class="line"><span class="type">Task</span> () successValue</div><div class="line"><span class="comment">-- 同理，忽略success</span></div><div class="line"><span class="type">Task</span> errorValue ()</div><div class="line"><span class="comment">-- 甚至</span></div><div class="line"><span class="type">Task</span> () ()</div></pre></td></tr></table></figure>
<h4 id="import-amp-module"><a href="#import-amp-module" class="headerlink" title="import &amp; module"></a>import &amp; module</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Html <span class="keyword">exposing</span> (..)</div><div class="line"><span class="comment">-- 把Html模块内的变量全部导入</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Html.Events <span class="keyword">exposing</span> (onClick)</div><div class="line"><span class="comment">-- 只导入指定的变量</span></div><div class="line"></div><div class="line"><span class="comment">-- 暴露module</span></div><div class="line"></div><div class="line"><span class="comment">-- 在文件开头加入</span></div><div class="line"><span class="keyword">module</span> Counter <span class="keyword">exposing</span> (<span class="type">Model</span>, initModel, <span class="type">Msg</span>, update, view)</div><div class="line"><span class="comment">-- exposing后是要暴露出去的变量名。使用(..)则暴露全部(不推荐)</span></div><div class="line"><span class="comment">-- module名(Counter)要首字母大写</span></div><div class="line"><span class="comment">-- module名(Counter)与文件名要一致</span></div><div class="line"><span class="comment">-- 且该文件内不再有main变量</span></div><div class="line"></div><div class="line"><span class="comment">-- 暴露文件夹内部的module</span></div><div class="line"><span class="comment">-- for example, 要暴露位于Players文件夹下的Utils.elm，即Players/Utils.elm</span></div><div class="line"><span class="keyword">module</span> Players.Utils <span class="keyword">exposing</span> (..)</div><div class="line"><span class="comment">-- 引用这个module</span></div><div class="line"><span class="keyword">import</span> Players.Utils</div></pre></td></tr></table></figure>
<h3 id="生成HTML"><a href="#生成HTML" class="headerlink" title="生成HTML"></a>生成HTML</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 引入全部HTML组件</span></div><div class="line"><span class="keyword">import</span> Html</div><div class="line"><span class="type">Html</span>.div [] []</div><div class="line"></div><div class="line"><span class="comment">-- or</span></div><div class="line"><span class="keyword">import</span> Html <span class="keyword">exposing</span> (..)</div><div class="line"><span class="title">div</span> [] []</div><div class="line"></div><div class="line"><span class="comment">-- 或者引入特定的组件</span></div><div class="line"><span class="keyword">import</span> Html <span class="keyword">exposing</span> (div)</div><div class="line"><span class="title">div</span> [] []</div></pre></td></tr></table></figure>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 调用方式</span></div><div class="line"><span class="title">div</span> [] []</div><div class="line"><span class="comment">-- 第一个[]内写入div的attr</span></div><div class="line"><span class="comment">-- 第二个[]内写入div的子组件</span></div><div class="line"></div><div class="line"><span class="comment">-- example</span></div><div class="line"><span class="keyword">import</span> Html.Events <span class="keyword">exposing</span> (onInput)</div><div class="line"><span class="keyword">import</span> Html.Attributes <span class="keyword">exposing</span> (..)</div><div class="line"><span class="keyword">import</span> Html <span class="keyword">exposing</span> (..)</div><div class="line"></div><div class="line"><span class="title">div</span> [class <span class="string">"example"</span>, id <span class="string">"example"</span>] [</div><div class="line">  span [] [text <span class="string">"hey world"</span>]</div><div class="line">]</div><div class="line"><span class="title">input</span> [onInput <span class="type">NewContent</span>, placeholder <span class="string">"placeholder"</span>] []</div></pre></td></tr></table></figure>
<p><strong>非module的渲染文件中必须有main变量</strong></p>
<blockquote>
<p>Front end applications in Elm start on a function called main. main is a function that returns an element to draw into the page. In this case it returns an Html element </p>
</blockquote>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Html <span class="keyword">exposing</span> (..)</div><div class="line"><span class="keyword">import</span> Html.App <span class="keyword">as</span> App</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="type">App</span>.beginnerProgram &#123;model = initModel, view = view, update = update&#125;</div><div class="line"><span class="comment">-- or</span></div><div class="line"><span class="title">main</span> =</div><div class="line">  <span class="type">Html</span>.program</div><div class="line">    &#123; init = init</div><div class="line">    , view = view</div><div class="line">    , update = update</div><div class="line">    , subscriptions = subscriptions</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>HTML渲染</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- 前端使用elm时的渲染方法</div><div class="line"><span class="keyword">const</span> Elm = <span class="built_in">require</span>(<span class="string">'./example.elm'</span>);</div><div class="line"><span class="keyword">const</span> mountNode = <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>);</div><div class="line"><span class="keyword">let</span> app = Elm.Main.embed(mountNode);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Elm" scheme="http://ecmadao.com/tags/Elm/"/>
    
  </entry>
  
  <entry>
    <title>Elm基础语法</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Elm/Elm%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Elm/Elm基础语法/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#elm%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95">Elm基础语法</a><ul>
<li><a href="#%E5%9F%BA%E6%9C%AC">基本</a><ul>
<li><a href="#type">Type</a><ul>
<li><a href="#type-aliases">Type aliases</a></li>
<li><a href="#union-types">Union types</a></li>
<li><a href="#unit-type">unit type</a></li>
</ul>
</li>
<li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5">字符串拼接</a></li>
<li><a href="#%E7%AE%97%E6%95%B0">算数</a></li>
<li><a href="#boolean">boolean</a></li>
<li><a href="#%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F">条件表达式</a></li>
</ul>
</li>
<li><a href="#more">more</a><ul>
<li><a href="#func">Func</a></li>
<li><a href="#letin">let..in..</a></li>
<li><a href="#list">List</a></li>
<li><a href="#tuple">tuple</a></li>
<li><a href="#record">Record</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="Elm基础语法"><a href="#Elm基础语法" class="headerlink" title="Elm基础语法"></a>Elm基础语法</h2><p><a href="https://learnxinyminutes.com/docs/elm/" target="_blank" rel="external">Learn X in Y minutes – Where X=Elm</a></p>
<h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><h4 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h4><p><a href="https://github.com/elm-guides/elm-for-js/blob/master/How%20to%20Read%20a%20Type%20Annotation.md" target="_blank" rel="external">How to Read a Type Annotation</a></p>
<p>基本类型和多数语言是类似的，String, Char, Bool Int, Float。<br>但需要注意，String必须用双引号，单引号是用来表示Char的</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 类型声明</span></div><div class="line"><span class="title">a</span>: <span class="type">Int</span> <span class="comment">-- 声明a变量必须是Int类型</span></div><div class="line"><span class="title">a</span> = <span class="number">1</span> <span class="comment">-- 注意在声明之后就需要赋值</span></div><div class="line"></div><div class="line"><span class="comment">-- 声明函数(接受类型和返回类型)</span></div><div class="line"><span class="title">func</span>: <span class="type">Int</span> -&gt; <span class="type">Int</span> <span class="comment">-- 接受一个Int，并返回一个Int</span></div><div class="line"><span class="title">fun</span>: <span class="type">String</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">String</span> <span class="comment">-- 接受一个String一个Int，并返回一个String</span></div></pre></td></tr></table></figure>
<h5 id="Type-aliases"><a href="#Type-aliases" class="headerlink" title="Type aliases"></a>Type aliases</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 类型设置别名</span></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">Id</span> = <span class="type">Int</span></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">UserName</span> = <span class="type">String</span></div><div class="line"></div><div class="line"><span class="comment">-- 对于Records</span></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">User</span> = &#123;</div><div class="line">  id: <span class="type">Int</span>,</div><div class="line">  name: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">-- 可以通过先对类型设置别名的方式，进行比较简单的声明</span></div><div class="line"><span class="title">a</span>: &#123;b: <span class="type">String</span>, c: <span class="type">Int</span>&#125; <span class="comment">-- a是一个类型较复杂的对象</span></div><div class="line"><span class="title">d</span>: <span class="type">List</span> &#123;b: <span class="type">String</span>, c: <span class="type">Int</span>&#125; <span class="comment">-- d是a组成的List</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">A</span> = &#123;b: <span class="type">String</span>, c: <span class="type">Int</span>&#125; <span class="comment">-- 声明A的类型</span></div><div class="line"><span class="title">a</span>: <span class="type">A</span></div><div class="line"><span class="title">d</span>: <span class="type">List</span> <span class="type">A</span></div></pre></td></tr></table></figure>
<h5 id="Union-types"><a href="#Union-types" class="headerlink" title="Union types"></a>Union types</h5><p>对于一个不确定类型的变量，其类型可以用<code>|</code>间隔，每个类型叫作一个<strong>Tag</strong></p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> <span class="type">Answer</span> = <span class="type">Yes</span> | <span class="type">No</span></div><div class="line"><span class="keyword">type</span> <span class="type">Visibility</span> = <span class="type">All</span> | <span class="type">Active</span> | <span class="type">Completed</span></div><div class="line"></div><div class="line"><span class="comment">-- usage</span></div><div class="line"><span class="title">update</span> visibility =</div><div class="line">	<span class="keyword">case</span> visibility <span class="keyword">of</span></div><div class="line">		<span class="type">All</span> -&gt;</div><div class="line">			<span class="comment">-- do something</span></div><div class="line">		<span class="type">Active</span> -&gt;</div><div class="line">			<span class="comment">-- do something</span></div><div class="line">		<span class="type">Completed</span> -&gt;</div><div class="line">			<span class="comment">-- do something</span></div></pre></td></tr></table></figure>
<p><strong>Union type</strong>里的Tag还可以是一个方法，后面要跟着它能接受的参数类型，且这个方法的返回值要跟目标type一样</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> <span class="type">User</span> = <span class="type">Anonymous</span> | <span class="type">Named</span> <span class="type">String</span></div><div class="line"></div><div class="line"><span class="type">Anonymous</span> : <span class="type">User</span></div><div class="line"><span class="type">Named</span>: <span class="type">String</span> -&gt; <span class="type">User</span></div><div class="line"></div><div class="line"><span class="comment">-- example</span></div><div class="line"><span class="title">userPhoto</span> : <span class="type">User</span> -&gt; <span class="type">String</span></div><div class="line"><span class="title">userPhoto</span> user =</div><div class="line">  <span class="keyword">case</span> user <span class="keyword">of</span></div><div class="line">    <span class="type">Anonymous</span> -&gt;</div><div class="line">      <span class="string">"anon.png"</span></div><div class="line">    <span class="type">Named</span> name -&gt;</div><div class="line">      <span class="string">"users/"</span> ++ name ++ <span class="string">".png"</span></div></pre></td></tr></table></figure>
<h5 id="unit-type"><a href="#unit-type" class="headerlink" title="unit type"></a>unit type</h5><p>在Elm里，空tuple<code>()</code>叫作<code>unit type</code>，经常被当做占位符使用。</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 举个栗子</span></div><div class="line"><span class="comment">-- 定义一个Message，这个别名接受一个参数并返回一个Record</span></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">Message</span> a =</div><div class="line">    &#123; code : <span class="type">String</span></div><div class="line">    , body : a</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">-- 定义一个func，接受Message作为参数，同时函数内部Message必须接受一个String</span></div><div class="line"><span class="title">readMessage</span> : <span class="type">Message</span> <span class="type">String</span> -&gt; <span class="type">String</span></div><div class="line"><span class="title">readMessage</span> message =</div><div class="line">    ...</div><div class="line"></div><div class="line"><span class="comment">-- 但是如果Message在readMessage方法内不需要接受参数，则使用空tuple作为参数</span></div><div class="line"><span class="title">readMessage</span> : <span class="type">Message</span> () -&gt; <span class="type">String</span></div><div class="line"><span class="title">readMessage</span> message =</div><div class="line">    ...</div></pre></td></tr></table></figure>
<h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"hey"</span> ++ <span class="string">" world"</span></div><div class="line"><span class="comment">-- hey world</span></div></pre></td></tr></table></figure>
<h4 id="算数"><a href="#算数" class="headerlink" title="算数"></a>算数</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 整除</span></div><div class="line"><span class="number">9</span> // <span class="number">2</span> <span class="comment">-- 4</span></div><div class="line"></div><div class="line"><span class="comment">-- 返回浮点数的除法</span></div><div class="line"><span class="number">9</span> /<span class="number">2</span> <span class="comment">-- 4.5</span></div><div class="line"></div><div class="line"><span class="comment">-- 平方</span></div><div class="line"><span class="number">5</span> ^ <span class="number">2</span> <span class="comment">-- 25</span></div></pre></td></tr></table></figure>
<h4 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">not</span> <span class="type">True</span> <span class="comment">-- False</span></div><div class="line"><span class="number">1</span> == <span class="number">1</span> <span class="comment">-- True</span></div><div class="line"><span class="number">1</span> /= <span class="number">1</span> <span class="comment">-- False</span></div><div class="line"><span class="number">1</span> &lt; <span class="number">10</span> <span class="comment">-- False</span></div></pre></td></tr></table></figure>
<h4 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- if else</span></div><div class="line"><span class="title">if</span> <span class="type">True</span> <span class="keyword">then</span> .. <span class="keyword">else</span> ..</div><div class="line"></div><div class="line"><span class="title">if</span> <span class="type">True</span> <span class="keyword">then</span> </div><div class="line">  ..</div><div class="line"><span class="title">else</span> <span class="keyword">if</span> <span class="type">True</span> <span class="keyword">then</span> </div><div class="line">  ..</div><div class="line"><span class="title">else</span></div><div class="line">  ..</div><div class="line"></div><div class="line"><span class="comment">-- case</span></div><div class="line"><span class="title">case</span> <span class="type">List</span>.head aList <span class="keyword">of</span></div><div class="line">  <span class="type">Just</span> x -&gt;</div><div class="line">  	<span class="string">"The head is "</span> ++ toString x</div><div class="line">  <span class="type">Nothing</span> -&gt;</div><div class="line">  	<span class="string">"The list was empty."</span></div></pre></td></tr></table></figure>
<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><h4 id="Func"><a href="#Func" class="headerlink" title="Func"></a>Func</h4><p><strong>类型的定义</strong></p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 以空格表示参数的接受和定义</span></div><div class="line"><span class="title">fun</span>: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></div><div class="line"><span class="title">fun</span> a b =</div><div class="line">	a + b</div><div class="line">	</div><div class="line"><span class="title">fun</span> <span class="number">1</span> <span class="number">2</span> <span class="comment">-- 3</span></div></pre></td></tr></table></figure>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 使用\表示匿名函数</span></div><div class="line"><span class="type">List</span>.map (\a -&gt; a * <span class="number">2</span>) [<span class="number">1.</span><span class="number">.4</span>] <span class="comment">-- [2, 4, 6, 8]</span></div></pre></td></tr></table></figure>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 在表示函数的参数和返回值的类型时，使用箭头链接</span></div><div class="line"><span class="title">fun</span>: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></div><div class="line"><span class="comment">-- 代表</span></div><div class="line"><span class="title">fun</span> a b =</div><div class="line">	<span class="comment">-- 只返回一个Int类型</span></div><div class="line">	a + b</div><div class="line"></div><div class="line"><span class="title">fun</span>: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></div><div class="line"><span class="comment">-- 代表</span></div><div class="line"><span class="title">fun</span> a b c=</div><div class="line">	<span class="comment">-- 只返回一个Int类型</span></div><div class="line">	a + b + c</div></pre></td></tr></table></figure>
<p><strong>why ?</strong></p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- why </span></div><div class="line"><span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></div><div class="line"><span class="comment">-- not</span></div><div class="line">(<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span></div></pre></td></tr></table></figure>
<p>你可能会问，为什么参数类型表示的是使用连续的箭头链接？这给人的直观感觉是，函数接受第一个参数后，返回一个函数，接受第二个参数，然后不断返回接受一个参数的函数直至最后返回一个结果。其实差不多就是这样。Elm是一门FP语言，而这样的函数就展现了柯里化（curry）的思想。</p>
<p><strong>curry</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">y</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> increment = add(<span class="number">1</span>);</div><div class="line">increment(<span class="number">1</span>); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- elm里的curry很自由</span></div><div class="line"><span class="comment">-- 不需要特地返回一函数</span></div><div class="line"><span class="title">add</span>: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></div><div class="line"><span class="title">add</span> x y =</div><div class="line">	x + y</div><div class="line"></div><div class="line"><span class="title">add2</span> = add <span class="number">2</span></div><div class="line"><span class="title">add2</span> <span class="number">3</span> <span class="comment">-- 5</span></div><div class="line"><span class="comment">-- 即</span></div><div class="line"><span class="title">add</span> (<span class="type">Int</span> <span class="type">Int</span>) == add (<span class="type">Int</span>) (<span class="type">Int</span>)</div></pre></td></tr></table></figure>
<p><strong>其他参数类型</strong></p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 接收/返回多个变量</span></div><div class="line"><span class="title">switch</span>: (a, b) -&gt; (b, a)</div><div class="line"><span class="title">switch</span> (x, y) =</div><div class="line">	(y, x)</div><div class="line"></div><div class="line"><span class="comment">-- 函数作为参数</span></div><div class="line"><span class="title">convertIntToString</span>: <span class="type">Int</span> -&gt; <span class="type">String</span></div><div class="line">	toString <span class="type">Int</span></div><div class="line"></div><div class="line"><span class="title">map</span>: (<span class="type">Int</span> -&gt; <span class="type">String</span>) -&gt; <span class="type">List</span> <span class="type">Int</span> -&gt; <span class="type">List</span> <span class="type">String</span></div><div class="line"><span class="title">map</span> convertIntToString [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">-- ["1", "2", "3"]</span></div><div class="line"></div><div class="line"><span class="comment">-- 但有时候我们可以不用特指参数类型</span></div><div class="line"><span class="title">map</span>: (a -&gt; b) -&gt; <span class="type">List</span> a -&gt; <span class="type">List</span> b</div><div class="line"></div><div class="line"><span class="comment">-- 这样只要第一个函数的参数/返回值和List a/b的类型相同就行了</span></div><div class="line"><span class="comment">-- 因此下面这些函数都是可行的</span></div><div class="line"><span class="title">convertStringToInt</span> : <span class="type">String</span> -&gt; <span class="type">Int</span></div><div class="line"><span class="title">convertIntToString</span> : <span class="type">Int</span> -&gt; <span class="type">String</span></div><div class="line"><span class="title">convertBoolToInt</span> : <span class="type">Bool</span> -&gt; <span class="type">Int</span></div><div class="line"></div><div class="line"><span class="comment">-- example</span></div><div class="line"><span class="title">map</span> convertStringToInt [<span class="string">"Hello"</span>, <span class="string">"1"</span>]</div><div class="line"><span class="title">map</span> convertIntToString [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line"><span class="title">map</span> convertBoolToInt [<span class="type">True</span>, <span class="type">False</span>]</div></pre></td></tr></table></figure>
<h4 id="let-in"><a href="#let-in" class="headerlink" title="let..in.."></a>let..in..</h4><p>let 表达式的结果会被用在in表达式内</p>
<blockquote>
<p><code>let</code> defines local variables for <code>in</code></p>
</blockquote>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="title">volume</span> &#123;width, height, depth&#125; =</div><div class="line">  <span class="keyword">let</span></div><div class="line">    area = width * height</div><div class="line">  <span class="keyword">in</span></div><div class="line">    area * depth</div><div class="line"><span class="title">volume</span> &#123; width = <span class="number">3</span>, height = <span class="number">2</span>, depth = <span class="number">7</span> &#125; <span class="comment">-- 42</span></div></pre></td></tr></table></figure>
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><a href="http://package.elm-lang.org/packages/elm-lang/core/3.0.0/List" target="_blank" rel="external">elm-lang - core - List</a></p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> List</div><div class="line"></div><div class="line"><span class="comment">-- List的类型为List a，其中a表示任意的类型。但一个List里的元素必须都是一样的类型</span></div><div class="line"><span class="comment">-- elements in a List must be the same type</span></div><div class="line"></div><div class="line">[<span class="number">1.</span><span class="number">.5</span>] == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="comment">-- True</span></div><div class="line"></div><div class="line"><span class="title">repeat</span>: <span class="type">Int</span> -&gt; a -&gt; <span class="type">List</span> a</div><div class="line"><span class="comment">-- Create a list with n copies of a value</span></div><div class="line"><span class="title">repeat</span> <span class="number">3</span> (<span class="number">0</span>,<span class="number">0</span>) == [(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">0</span>)]</div><div class="line"></div><div class="line"><span class="title">append</span>: <span class="type">List</span> a -&gt; <span class="type">List</span> a -&gt; <span class="type">List</span> a</div><div class="line"><span class="comment">-- append list</span></div><div class="line">[<span class="number">1.</span><span class="number">.5</span>] ++ [<span class="number">6.</span><span class="number">.10</span>] == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line"><span class="title">append</span> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>] [<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>] == [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>]</div><div class="line"><span class="title">append</span> ['a','b'] ['c'] == ['a','b','c']</div><div class="line"></div><div class="line">(::): a -&gt; <span class="type">List</span> a -&gt; <span class="type">List</span> a</div><div class="line"><span class="comment">-- add item to the front of a list</span></div><div class="line"><span class="number">0</span> :: [<span class="number">1.</span><span class="number">.5</span>] <span class="comment">-- [0, 1, 2, 3, 4, 5]</span></div><div class="line"></div><div class="line"><span class="title">concat</span>: <span class="type">List</span> (<span class="type">List</span> a) -&gt;<span class="type">List</span> a</div><div class="line"><span class="title">concat</span> [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]] == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div></pre></td></tr></table></figure>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> List</div><div class="line"><span class="title">examples</span>: <span class="type">List</span> <span class="type">Int</span></div><div class="line"><span class="title">examples</span> = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="type">List</span>.isEmpty: <span class="type">List</span> a -&gt; <span class="type">Bool</span></div><div class="line"><span class="comment">-- Determine if a list is empty.</span></div><div class="line"><span class="type">List</span>.isEmpty examples <span class="comment">-- False</span></div><div class="line"></div><div class="line"><span class="type">List</span>.length: <span class="type">List</span> a -&gt; <span class="type">Int</span></div><div class="line"><span class="type">List</span>.length examples <span class="comment">-- 5</span></div><div class="line"></div><div class="line"><span class="type">List</span>.reverse: <span class="type">List</span> a -&gt; <span class="type">List</span> a</div><div class="line"><span class="comment">-- Reverse a list.</span></div><div class="line"><span class="type">List</span>.reverse examples <span class="comment">-- [3, 4, 5, 1, 2]</span></div><div class="line"></div><div class="line"><span class="type">List</span>.sort: <span class="type">List</span> a -&gt; <span class="type">List</span> a</div><div class="line"><span class="comment">-- sort a list</span></div><div class="line"><span class="type">List</span>.sort examples -&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="type">List</span>.member: a -&gt; <span class="type">List</span> a -&gt; <span class="type">Bool</span></div><div class="line"><span class="comment">-- Figure out whether a list contains a value.</span></div><div class="line"><span class="title">member</span> <span class="number">9</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] == <span class="type">False</span></div><div class="line"><span class="title">member</span> <span class="number">4</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] == <span class="type">True</span></div><div class="line"></div><div class="line"><span class="type">List</span>.map: (a -&gt; b) -&gt; <span class="type">List</span> a -&gt; <span class="type">List</span> b</div><div class="line"><span class="comment">-- map func</span></div><div class="line"><span class="title">double</span> n = n * <span class="number">2</span></div><div class="line"><span class="title">number_list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="type">List</span>.map double number_list <span class="comment">-- [2, 4, 6, 8]</span></div></pre></td></tr></table></figure>
<h4 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- tuple有固定的长度，里面元素的类型可以不同</span></div><div class="line">(<span class="string">"elm"</span>, <span class="number">42</span>)</div><div class="line"></div><div class="line"><span class="title">fst</span> (<span class="string">"elm"</span>, <span class="number">42</span>) <span class="comment">-- "elm"</span></div><div class="line"><span class="title">snd</span> (<span class="string">"elm"</span>, <span class="number">42</span>) <span class="comment">-- 42</span></div><div class="line"></div><div class="line"><span class="comment">-- 空tuple叫作unit，经常作为占位符使用</span></div><div class="line">()</div></pre></td></tr></table></figure>
<h4 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h4><p>key = value组成的键值对</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- like tuples but the fields have names</span></div><div class="line">&#123; x = <span class="number">3</span>, y = <span class="number">7</span> &#125;</div><div class="line"></div><div class="line">&#123; x = <span class="number">3</span>, y = <span class="number">7</span> &#125;.x <span class="comment">-- 3</span></div><div class="line">.y &#123; x = <span class="number">3</span>, y = <span class="number">7</span> &#125; <span class="comment">-- 7</span></div><div class="line"></div><div class="line"><span class="comment">-- 更新 record. (It must have the fields already.)</span></div><div class="line">&#123; person |</div><div class="line">  name = <span class="string">"ecmadao"</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">-- 批量更新</span></div><div class="line">&#123; person |</div><div class="line">  name = <span class="string">"ecmadao"</span>,</div><div class="line">  age = <span class="number">24</span>&#125;</div></pre></td></tr></table></figure>
<p>与Object不同的是，Record不能使用自身不存在的键，且键值不能是undefined或者null</p>
<p><strong>Record赋值：</strong></p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">Model</span> = </div><div class="line">  &#123;a: <span class="type">Int</span>, b: <span class="type">String</span>&#125;</div><div class="line"></div><div class="line"><span class="title">model</span> = <span class="type">Model</span> <span class="number">1</span> <span class="string">"1"</span> </div><div class="line"><span class="comment">-- &#123;a = 1, b = "1"&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="title">origin</span> : &#123; x : <span class="type">Float</span>, y : <span class="type">Float</span>, z : <span class="type">Float</span> &#125;</div><div class="line"><span class="title">origin</span> =</div><div class="line">  &#123; x = <span class="number">0</span>, y = <span class="number">0</span>, z = <span class="number">0</span> &#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> <span class="keyword">alias</span> <span class="type">Point3D</span> =</div><div class="line">  &#123; x : <span class="type">Float</span>, y : <span class="type">Float</span>, z : <span class="type">Float</span> &#125;</div><div class="line"></div><div class="line"><span class="title">otherOrigin</span> : <span class="type">Point3D</span></div><div class="line"><span class="title">otherOrigin</span> =</div><div class="line">  <span class="type">Point3D</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="title">origin</span> == otherOrigin <span class="comment">-- True</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Elm" scheme="http://ecmadao.com/tags/Elm/"/>
    
  </entry>
  
  <entry>
    <title>NPM 命令备忘</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/NodeJS/NPM%20%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/NodeJS/NPM 命令备忘/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#npm-%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98">NPM 命令备忘</a></li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="NPM-命令备忘"><a href="#NPM-命令备忘" class="headerlink" title="NPM 命令备忘"></a>NPM 命令备忘</h2><ul>
<li>setup</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建npm包，建立 package.json 文件</span></div><div class="line">npm init</div></pre></td></tr></table></figure>
<ul>
<li>install &amp;&amp; uninstall</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// install</span></div><div class="line">npm install</div><div class="line">npm install --global --save --save-dev</div><div class="line">npm install -g -S -D</div><div class="line"></div><div class="line"><span class="comment">// uninstall</span></div><div class="line">npm uninstall</div><div class="line">npm uninstall --global --save --save-dev</div><div class="line">npm uninstall -g -S -D</div></pre></td></tr></table></figure>
<p><code>--save</code> 添加 package.json 中 <code>dependencies</code> 字段里的依赖</p>
<p><code>--save-dev</code> 添加 package.json 中 <code>devDependencies</code> 字段里的依赖</p>
<p>devDependencies对应用于开发阶段使用的一些测试模块依赖</p>
<p>dependencies则对应于生产环节正式发布时的依赖</p>
<p>生产环境发布：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --production</div></pre></td></tr></table></figure>
<ul>
<li>upgrade</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">npm outdated</div><div class="line"><span class="comment">// 检测当前安装的所有npm包是否有更新，并列出可以更新的包，如果没有任何输出，则没有可用更新</span></div><div class="line"></div><div class="line"><span class="comment">// 更新指定包（非全局安装）</span></div><div class="line">npm update packageName</div><div class="line"><span class="comment">// 对于全局安装的包，则使用</span></div><div class="line">npm update -g packageName</div><div class="line"><span class="comment">// 更新全部包</span></div><div class="line">npm update</div><div class="line">npm update -g</div></pre></td></tr></table></figure>
<ul>
<li>show all package</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -g list</div></pre></td></tr></table></figure>
<p><a href="http://www.alloyteam.com/2016/03/master-npm/" target="_blank" rel="external">玩转npm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://ecmadao.com/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Tips</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/CSS/CSS-Tips/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/CSS/CSS-Tips/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#%E9%A1%B5%E9%9D%A2%E5%8F%98%E7%81%B0">页面变灰</a></li>
<li><a href="#%E6%88%AA%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2">截断字符串</a></li>
<li><a href="#box-sizing"><code>box-sizing</code></a></li>
<li><a href="#xnth-childn"><code>X:nth-child(n)</code></a></li>
<li><a href="#%E8%AE%A9%E5%85%83%E7%B4%A0%E4%B8%8D%E6%8D%95%E8%8E%B7%E4%BA%8B%E4%BB%B6">让元素不捕获事件</a></li>
<li><a href="#%E9%80%9A%E8%BF%873%E5%9C%A8%E5%85%83%E7%B4%A0%E5%86%85%E9%83%A8%EF%BC%88%E5%86%85%E9%83%A8%E7%9A%84%E5%89%8D%E9%9D%A2%E6%88%96%E8%80%85%E5%90%8E%E9%9D%A2%EF%BC%89%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0">通过3在元素内部（内部的前面或者后面）动态添加元素</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E8%B4%9F%E7%9A%84nth-child%E9%80%89%E5%8F%96%E5%85%83%E7%B4%A0">使用负的<code>nth-child</code>选取元素</a></li>
<li><a href="#currentcolor%E6%98%AFcolor%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC">currentColor是color属性的值</a></li>
<li><a href="#user-select%E7%A6%81%E6%AD%A2%E9%80%89%E6%8B%A9%E6%96%87%E6%9C%AC"><code>user-select</code>禁止选择文本</a></li>
<li><a href="#selection%E5%8F%AF%E8%AE%BE%E7%BD%AE%E6%96%87%E5%AD%97%E8%A2%AB%E9%80%89%E6%8B%A9%E6%97%B6%E7%9A%84%E6%A0%B7%E5%BC%8F"><code>selection</code>可设置文字被选择时的样式</a></li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h3 id="页面变灰"><a href="#页面变灰" class="headerlink" title="页面变灰"></a>页面变灰</h3><p>在<code>&lt;body&gt;</code>中加入<code>class=&quot;be-gray&quot;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.be-gray&#123;</div><div class="line">	filter: grayscale(100%);//IE浏览器</div><div class="line">	-webkit-filter: grayscale(100%);//谷歌浏览器</div><div class="line">	-moz-filter: grayscale(100%);//火狐</div><div class="line">	-ms-filter: grayscale(100%);</div><div class="line">	-o-filter: grayscale(100%);</div><div class="line">	filter:</div><div class="line">		progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);</div><div class="line"> 	-webkit-filter: grayscale(1);//谷歌浏览器</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="截断字符串"><a href="#截断字符串" class="headerlink" title="截断字符串"></a>截断字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;test&quot;&gt; </div><div class="line">	任意长度的字符串任意长度的字符串 </div><div class="line">	任意长度的字符串任意长度的字符串 </div><div class="line">	任意长度的字符串任意长度的字符串</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#id&#123;</div><div class="line">  width:300px;</div><div class="line">  </div><div class="line">  //一下三个必须全部加上</div><div class="line">  overflow:hidden;</div><div class="line">  text-overflow:ellipsis;</div><div class="line">  white-space:nowrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>text-overflow</code>:</p>
<ul>
<li>clip : 修剪文本</li>
<li>ellipsis : 显示省略符号(…)来代表被修剪的文本</li>
<li>string : 使用给定的字符串来代表被修剪的文本</li>
</ul>
<p><code>white-space</code>:</p>
<ul>
<li>normal : 默认值。文本自动处理换行。假如抵达容器边界内容会转到下一行</li>
<li>pre : 换行和其他空白字符都将受到保护</li>
<li>nowrap : 强制在同一行内显示所有文本，直到文本结束或者遭遇 br 对象</li>
</ul>
<h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a><code>box-sizing</code></h3><p>当一个元素加入了边框属性时，边框会被加在元素宽度的外围。此时，元素的实际宽度将大于设定的<code>width</code>值。<br>为了避免这个问题，可以使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">box-sizing:border-box;</div></pre></td></tr></table></figure>
<p>那样的话，边框就会位于元素的内侧，元素的总宽度就不会改变</p>
<h3 id="X-nth-child-n"><a href="#X-nth-child-n" class="headerlink" title="X:nth-child(n)"></a><code>X:nth-child(n)</code></h3><p>该选择器选择的是，X元素的父元素下，第n个(从1开始计数)子元素</p>
<p>若该子元素不是X元素，则该选择器无效。只有是X元素时才能被选上</p>
<h3 id="让元素不捕获事件"><a href="#让元素不捕获事件" class="headerlink" title="让元素不捕获事件"></a>让元素不捕获事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pointer-events: none;</div></pre></td></tr></table></figure>
<p><a href="https://www.zhihu.com/question/39817183" target="_blank" rel="external"> 有哪些暖心却鲜为人知的属性？</a></p>
<h3 id="通过3在元素内部（内部的前面或者后面）动态添加元素"><a href="#通过3在元素内部（内部的前面或者后面）动态添加元素" class="headerlink" title="通过3在元素内部（内部的前面或者后面）动态添加元素"></a>通过3在元素内部（内部的前面或者后面）动态添加元素</h3><ul>
<li><code>::before</code></li>
<li><p><code>::after</code></p>
</li>
<li><p>作用一</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//建立一个和父元素大小相同的伪元素</div><div class="line">div::before &#123;</div><div class="line">	content: &apos;&apos;; //添加元素的内容</div><div class="line">	position: absolute;</div><div class="line">	top: 0;</div><div class="line">	bottom: 0;</div><div class="line">	left: 0;</div><div class="line">	right: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这种形式可以添加一个没有内容的空区域，进行多重的阴影效果布局</p>
<ul>
<li>作用二</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">div::after &#123;</div><div class="line">	content: &apos;&apos;;</div><div class="line">	display: block;</div><div class="line">	clear: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当父元素内有浮动子元素，且父元素高度不定，需要被子元素撑起时，通过给<code>::after</code>设置<code>clear: both</code>，可以完美达到效果</p>
<h3 id="使用负的nth-child选取元素"><a href="#使用负的nth-child选取元素" class="headerlink" title="使用负的nth-child选取元素"></a>使用负的<code>nth-child</code>选取元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//使用负的 nth-child 在 1 到 n 之间选择元素</div><div class="line">li &#123;</div><div class="line">	display: none;</div><div class="line">&#125;</div><div class="line">//选择第1到第3个元素并显示它们</div><div class="line">li:nth-child(-n + 3) &#123;</div><div class="line">	display: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="currentColor是color属性的值"><a href="#currentColor是color属性的值" class="headerlink" title="currentColor是color属性的值"></a>currentColor是color属性的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line">  width: 200px;</div><div class="line">  height: 200px;</div><div class="line">  color: #343434;</div><div class="line">  border: 1px solid currentColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="user-select禁止选择文本"><a href="#user-select禁止选择文本" class="headerlink" title="user-select禁止选择文本"></a><code>user-select</code>禁止选择文本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line">  -webkit-user-select: none;</div><div class="line">  -moz-user-select: none;</div><div class="line">  user-select: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="selection可设置文字被选择时的样式"><a href="#selection可设置文字被选择时的样式" class="headerlink" title="selection可设置文字被选择时的样式"></a><code>selection</code>可设置文字被选择时的样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&amp;::selection &#123;</div><div class="line">    background: #FE6E66;</div><div class="line">    color: #FFF;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="CSS" scheme="http://ecmadao.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>PostCSS配置指北</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/CSS/PostCSS%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/CSS/PostCSS配置指北/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#postcss%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97">PostCSS配置指北</a><ul>
<li><a href="#use-with-webpack">Use with webpack</a><ul>
<li><a href="#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">基本配置</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6">使用插件</a></li>
</ul>
</li>
<li><a href="#%E5%85%BC%E5%AE%B9%E6%80%A7css%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8">兼容性CSS的自动补全</a></li>
<li><a href="#use-stylelint">Use stylelint</a><ul>
<li><a href="#%E5%9C%A8webpack%E5%86%85%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8stylelint">在webpack内单独使用stylelint</a></li>
<li><a href="#%E5%9C%A8postcss%E5%86%85%E4%BD%BF%E7%94%A8%E8%8D%90">在PostCSS内使用(荐)</a></li>
<li><a href="#1-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F">1. 基础使用方式</a></li>
<li><a href="#2-%E5%A2%9E%E5%8A%A0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2. 增加配置文件</a><ul>
<li><a href="#stylelintignore"><code>.stylelintignore</code></a></li>
<li><a href="#stylelintconfigjs"><code>stylelint.config.js</code></a></li>
</ul>
</li>
<li><a href="#3-stylelintplugin%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0">3. StyleLintPlugin的配置参数</a></li>
</ul>
</li>
<li><a href="#%E8%B5%84%E6%BA%90">资源</a><ul>
<li><a href="#postcss-&amp;-loader">postcss &amp; loader</a></li>
<li><a href="#autoprefixer-&amp;-cssnext">autoprefixer &amp; cssnext</a></li>
<li><a href="#stylelint">stylelint</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="PostCSS配置指北"><a href="#PostCSS配置指北" class="headerlink" title="PostCSS配置指北"></a><a href="https://github.com/postcss/postcss" target="_blank" rel="external">PostCSS</a>配置指北</h2><p><img src="/images/postcss.png" alt="postcss"></p>
<blockquote>
<p><code>PostCSS</code>并不是一门语言，而是一个类似于<code>webpack</code>的工具，它支持很多插件，来达到便捷的编译效果，组成一个CSS编译/lint/autoprefixer的生态圈。它的作者是<a href="https://evilmartians.com/" target="_blank" rel="external">Euil Martians</a>，一家致力于技术研究与网站外包开发的公司。其后端技术栈偏重于Ruby，而前端从React到Node都有涉猎。</p>
</blockquote>
<p><code>PostCSS</code>的一大特点是，具体的编译插件甚至是CSS书写风格，可以根据自己的需要进行安装，选择自己需要的特性：嵌套，函数，变量。自动补全，CSS新特性等等，而不是像<code>less</code>或者<code>scss</code>一样的大型全家桶。因此，不需要再专门去学习<code>less</code>或者<code>scss</code>的语法，只要选择自己喜欢的特性，可以只写CSS文件，但依旧可以写嵌套或者函数，然后选择合适的插件编译它就行了。</p>
<h3 id="Use-with-webpack"><a href="#Use-with-webpack" class="headerlink" title="Use with webpack"></a>Use with webpack</h3><p>鉴于现在<code>webpack</code>也越来越火，所以之后的配置主要是借助于<code>postcss-loader</code>，将<code>PostCSS</code>的生态圈依托在<code>webpack</code>之下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装webpack postcss loader</span></div><div class="line">$ npm install postcss-loader --save-dev</div></pre></td></tr></table></figure>
<h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 配置webpack.config.js</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  <span class="attr">loaders</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">      <span class="comment">// 如果使用了 ExtractTextPlugin</span></div><div class="line">      loader: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css!postcss'</span>)</div><div class="line">      <span class="comment">// 否则</span></div><div class="line">      <span class="comment">// loader: "style-loader!css-loader!postcss-loader"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;,</div><div class="line"><span class="attr">postcss</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> [ <span class="comment">// 里面是我们要用的插件</span></div><div class="line">	];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><blockquote>
<p>快速配置一览</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cssnext可以让你写CSS4的语言，并能配合autoprefixer进行浏览器兼容的不全，而且还支持嵌套语法</span></div><div class="line">$ npm install postcss-cssnext --save-dev</div><div class="line"><span class="comment"># 浏览器兼容补全</span></div><div class="line">$ npm install autoprefixer --save-dev</div><div class="line"></div><div class="line"><span class="comment"># 类似scss的语法，实际上如果只是想用嵌套的话有cssnext就够了</span></div><div class="line">$ npm install precss --save-dev</div><div class="line"></div><div class="line"><span class="comment"># 在@import css文件的时候让webpack监听并编译</span></div><div class="line">$ npm install postcss-import --save-dev</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 配置webpack.config.js</span></div><div class="line"><span class="keyword">const</span> postcssImport = <span class="built_in">require</span>(<span class="string">'postcss-import'</span>);</div><div class="line"><span class="keyword">const</span> cssnext = <span class="built_in">require</span>(<span class="string">'postcss-cssnext'</span>);</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line">postcss: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> [</div><div class="line">    postcssImport(&#123; <span class="attr">addDependencyTo</span>: webpack &#125;),</div><div class="line">		cssnext(&#123;<span class="attr">autoprefixer</span>: &#123;<span class="attr">browsers</span>: <span class="string">"ie &gt;= 10, ..."</span>&#125;&#125;)</div><div class="line">	];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="兼容性CSS的自动补全"><a href="#兼容性CSS的自动补全" class="headerlink" title="兼容性CSS的自动补全"></a><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="external">兼容性CSS的自动补全</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install autoprefixer --save-dev</div></pre></td></tr></table></figure>
<ul>
<li><code>autoprefixer</code>也可以单独配置使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</div><div class="line"><span class="comment">// ...</span></div><div class="line">postcss: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> [autoprefixer(&#123; <span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>] &#125;)]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>或者与<a href="https://github.com/MoOx/postcss-cssnext" target="_blank" rel="external">postcss-cssnext</a>一起使用，但<code>autoprefixer</code>都要进行安装</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> cssnext = <span class="built_in">require</span>(<span class="string">'postcss-cssnext'</span>);</div><div class="line"></div><div class="line">postcss: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// 通过配置browsers，可以指定将CSS语法兼容到什么程度</span></div><div class="line">  <span class="keyword">return</span> [cssnext(&#123;<span class="attr">autoprefixer</span>: &#123;<span class="attr">browsers</span>: <span class="string">"ie &gt;= 10, ..."</span>&#125;&#125;)]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/postcss/autoprefixer#options" target="_blank" rel="external"><code>autoprefixer</code>的配置</a></li>
</ul>
<h3 id="Use-stylelint"><a href="#Use-stylelint" class="headerlink" title="Use stylelint"></a>Use stylelint</h3><p><a href="https://github.com/stylelint/stylelint" target="_blank" rel="external">Stylelint</a>插件可以让你在编译的时候就知道自己CSS文件里的错误</p>
<h4 id="在webpack内单独使用stylelint"><a href="#在webpack内单独使用stylelint" class="headerlink" title="在webpack内单独使用stylelint"></a>在webpack内单独使用stylelint</h4><p>用到如下插件：</p>
<ul>
<li><a href="https://github.com/vieron/stylelint-webpack-plugin" target="_blank" rel="external">stylelint-webpack-plugin</a></li>
<li><a href="https://github.com/stylelint/stylelint-config-standard" target="_blank" rel="external">stylelint-config-standard</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install stylelint-webpack-plugin --save-dev</div><div class="line"><span class="comment"># stylelint语法，使用标准语法</span></div><div class="line">$ npm install stylelint-config-standard --save-dev</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="keyword">const</span> StyleLintPlugin = <span class="built_in">require</span>(<span class="string">'stylelint-webpack-plugin'</span>);</div><div class="line"><span class="comment">// ...</span></div><div class="line">plugins: [</div><div class="line">	<span class="keyword">new</span> StyleLintPlugin(&#123;</div><div class="line">      <span class="attr">config</span>: &#123;</div><div class="line">        <span class="comment">// 你的lint扩展自刚刚安装的stylelint-config-standard</span></div><div class="line">        <span class="string">"extends"</span>: <span class="string">"stylelint-config-standard"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="comment">// 正则匹配想要lint监测的文件</span></div><div class="line">      files: <span class="string">'frontend/stylesheet/**/*.l?(e|c)ss'</span></div><div class="line">  &#125;),</div><div class="line">],</div></pre></td></tr></table></figure>
<h4 id="在PostCSS内使用-荐"><a href="#在PostCSS内使用-荐" class="headerlink" title="在PostCSS内使用(荐)"></a>在PostCSS内使用(荐)</h4><p>会用到如下插件：</p>
<ul>
<li><a href="https://github.com/stylelint/stylelint" target="_blank" rel="external">stylelint</a></li>
<li><a href="https://github.com/postcss/postcss-reporter" target="_blank" rel="external">postcss-reporter</a></li>
<li><a href="https://github.com/stylelint/stylelint-config-standard" target="_blank" rel="external">stylelint-config-standard</a></li>
</ul>
<h4 id="1-基础使用方式"><a href="#1-基础使用方式" class="headerlink" title="1. 基础使用方式"></a>1. <a href="https://github.com/stylelint/stylelint/blob/master/docs/user-guide/postcss-plugin.md" target="_blank" rel="external">基础使用方式</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装stylelint</span></div><div class="line">$ npm install stylelint --save-dev</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="keyword">const</span> stylelint = <span class="built_in">require</span>(<span class="string">'stylelint'</span>);</div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  <span class="attr">loaders</span>: [</div><div class="line">    &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css!postcss'</span>) &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line">postcss: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [</div><div class="line">    postcssImport(&#123; <span class="attr">addDependencyTo</span>: webpack &#125;),</div><div class="line">    stylelint(&#123;</div><div class="line">      <span class="attr">failOnError</span>: <span class="literal">true</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是最基本的配置了。因为有<code>postcss-loader</code>的存在，所以在webpack解析css的时候，都会调用postcss里返回的插件，因此就会使用<code>stylelint</code>对代码进行检查。</p>
<p>但这样的配置有一个很严重的缺点：如果你在js中引用了node_module里的css文件，或者引用了其他不想进行编译的文件，PostCSS会对其一视同仁的调用插件编译/检查。此时就需要我们来配置<code>.stylelintignore</code>以及<code>stylelint.config.js</code>进行更精确的编译/检查。</p>
<h4 id="2-增加配置文件"><a href="#2-增加配置文件" class="headerlink" title="2. 增加配置文件"></a>2. 增加配置文件</h4><ul>
<li><a href="https://github.com/stylelint/stylelint/blob/master/docs/user-guide/configuration.md" target="_blank" rel="external">stylelint配置说明</a></li>
<li><a href="https://github.com/stylelint/stylelint/blob/master/docs/user-guide/postcss-plugin.md" target="_blank" rel="external">stylelint with postcss配置说明</a></li>
</ul>
<h5 id="stylelintignore"><a href="#stylelintignore" class="headerlink" title=".stylelintignore"></a><code>.stylelintignore</code></h5><p>在项目根目录下添加<code>.stylelintignore</code>文件，并在内部写下不想通过PostCSS编译的文件路径：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node_modules/</div><div class="line">frontend/vendor/</div></pre></td></tr></table></figure>
<p>之后，在没有指明<code>ignorePath</code>的情况下，stylelint会自动寻找根目录下的<code>.stylelintignore</code>文件。</p>
<h5 id="stylelint-config-js"><a href="#stylelint-config-js" class="headerlink" title="stylelint.config.js"></a><code>stylelint.config.js</code></h5><p>安装<code>stylelint-config-standard</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install stylelint-config-standard --save-dev</div></pre></td></tr></table></figure>
<p>在配置文件中指明我们的检测语法扩展自该插件：</p>
<ul>
<li><a href="https://github.com/stylelint/stylelint/blob/master/docs/user-guide.md" target="_blank" rel="external">User guide</a></li>
<li><a href="https://github.com/stylelint/stylelint/blob/master/docs/user-guide/rules.md" target="_blank" rel="external">配置规则</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 常用配置</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">extends</span>: <span class="string">"stylelint-config-standard"</span>,</div><div class="line">  <span class="comment">// 各rules的具体作用见上面链接</span></div><div class="line">  rules: &#123;</div><div class="line">    <span class="string">"block-no-empty"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">"color-no-invalid-hex"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"comment-empty-line-before"</span>: [ <span class="string">"always"</span>, &#123;</div><div class="line">      <span class="string">"ignore"</span>: [<span class="string">"stylelint-commands"</span>, <span class="string">"between-comments"</span>],</div><div class="line">    &#125; ],</div><div class="line">    <span class="string">"declaration-colon-space-after"</span>: <span class="string">"always"</span>,</div><div class="line">    <span class="string">"max-empty-lines"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"rule-nested-empty-line-before"</span>: [ <span class="string">"always"</span>, &#123;</div><div class="line">      <span class="string">"except"</span>: [<span class="string">"first-nested"</span>],</div><div class="line">      <span class="string">"ignore"</span>: [<span class="string">"after-comment"</span>],</div><div class="line">    &#125; ],</div><div class="line">    <span class="comment">// 允许的单位</span></div><div class="line">    <span class="string">"unit-whitelist"</span>: [<span class="string">"em"</span>, <span class="string">"rem"</span>, <span class="string">"%"</span>, <span class="string">"s"</span>, <span class="string">"ms"</span>, <span class="string">"px"</span>]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后指明PostCSS的配置文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">postcss: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [</div><div class="line">    postcssImport(&#123; <span class="attr">addDependencyTo</span>: webpack &#125;),</div><div class="line">    stylelint(&#123;</div><div class="line">        <span class="attr">config</span>: <span class="built_in">require</span>(<span class="string">'../../stylelint.config.js'</span>),</div><div class="line">        <span class="attr">failOnError</span>: <span class="literal">true</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时运行webpack，有问题的CSS文件输出大概是这样的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WARNING <span class="keyword">in</span> ./~/css-loader!./~/postcss-loader!./frontend/stylesheet/layout/test_post_css.css</div><div class="line">    stylelint: /Users/ecmadao1/Dev/Python/where_to_go/frontend/stylesheet/layout/test_post_css.css:17:1: Expected indentation of 2 spaces (indentation)</div></pre></td></tr></table></figure>
<p>很难看清楚吧！因此接下来安装<code>postcss-reporter</code>来美化输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install postcss-reporter --save-dev</div></pre></td></tr></table></figure>
<p>webpack配置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">postcss: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [</div><div class="line">    postcssImport(&#123; <span class="attr">addDependencyTo</span>: webpack &#125;),</div><div class="line">    stylelint(&#123;</div><div class="line">        <span class="attr">config</span>: <span class="built_in">require</span>(<span class="string">'../../stylelint.config.js'</span>),</div><div class="line">        <span class="attr">failOnError</span>: <span class="literal">true</span></div><div class="line">    &#125;),</div><div class="line">    postcssReporter(&#123; <span class="attr">clearMessages</span>: <span class="literal">true</span> &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后的输出会是这样的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">frontend/stylesheet/layout/test_post_css.css</div><div class="line">17:1    ⚠  Expected indentation of 2 spaces (indentation) [stylelint]</div></pre></td></tr></table></figure>
<p>吊吊哒！</p>
<h4 id="3-StyleLintPlugin的配置参数"><a href="#3-StyleLintPlugin的配置参数" class="headerlink" title="3. StyleLintPlugin的配置参数"></a>3. <a href="https://github.com/vieron/stylelint-webpack-plugin#options" target="_blank" rel="external">StyleLintPlugin的配置参数</a></h4><p><a href="http://stylelint.io/user-guide/node-api/#options" target="_blank" rel="external">stylelint options</a>里面的配置也可以在plugin里使用。介绍几个常用的配置：</p>
<ul>
<li>config：lint基础配置。没有的话则会去寻找<code>.stylelintrc</code></li>
<li>configFile：lint配置文件。可以被config的配置替代。默认为<code>.stylelintrc</code>文件</li>
<li>context：上下文环境。默认使用webpack的context</li>
<li>files：要匹配的文件。默认为<code>[&#39;**/*.s?(a|c)ss&#39;]</code></li>
<li>failOnError：错误时是否停止编译。默认<code>false</code></li>
<li>quiet：在console中不打印错误信息。默认<code>false</code></li>
</ul>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><h4 id="postcss-amp-loader"><a href="#postcss-amp-loader" class="headerlink" title="postcss &amp; loader"></a>postcss &amp; loader</h4><ul>
<li><a href="https://github.com/postcss/postcss" target="_blank" rel="external">postcss</a></li>
<li><a href="https://github.com/postcss/postcss-loader" target="_blank" rel="external">postcss-loader</a></li>
<li><a href="https://github.com/postcss/postcss-import" target="_blank" rel="external">postcss-import</a></li>
</ul>
<h4 id="autoprefixer-amp-cssnext"><a href="#autoprefixer-amp-cssnext" class="headerlink" title="autoprefixer &amp; cssnext"></a>autoprefixer &amp; cssnext</h4><ul>
<li><a href="http://cssnext.io/" target="_blank" rel="external">cssnext</a></li>
<li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="external">autoprefixer</a></li>
<li><a href="https://github.com/ai/browserslist" target="_blank" rel="external">browserslist</a></li>
</ul>
<h4 id="stylelint"><a href="#stylelint" class="headerlink" title="stylelint"></a>stylelint</h4><ul>
<li><a href="https://github.com/stylelint/stylelint" target="_blank" rel="external">stylelint</a></li>
<li><a href="https://github.com/vieron/stylelint-webpack-plugin" target="_blank" rel="external">stylelint-webpack-plugin</a></li>
<li><a href="https://github.com/stylelint/stylelint-config-standard" target="_blank" rel="external">stylelint-config-standard</a></li>
<li><a href="https://github.com/postcss/postcss-reporter" target="_blank" rel="external">postcss-reporter</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="CSS" scheme="http://ecmadao.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Project-Coding-Guide</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Projects/Project-Coding-Guide/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Projects/Project-Coding-Guide/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>title: ‘Project &amp; Coding Guide’<br>date: 2016-03-03 00:33:51</p>
<h2 id="tags-Coding"><a href="#tags-Coding" class="headerlink" title="tags: Coding"></a>tags: Coding</h2><blockquote>
<p>程序是给人读的，只是偶尔让计算机执行一下</p>
</blockquote>
<ul>
<li>团队统一编程风格<ul>
<li>基本的代码格式化</li>
<li>函数/变量/文件/常量等的命名规范<ul>
<li>小驼峰式命名法（首字母小写）命名函数/变量</li>
<li>大驼峰式命名法（全大写）命名文件</li>
<li>全大写+单词之间下划线连接（MAX_COUNT）命名常量</li>
</ul>
</li>
<li>适时空行/换行</li>
<li>合理使用注释<ul>
<li>如果代码具有一些特殊含义，且无法直接从代码中看出来，此时有必要添加注释</li>
<li>可以在函数前添加注释，对函数参数的作用进行说明</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>代码设计<ul>
<li>不要有超大函数或者超大类<ul>
<li>函数拆分，各个函数独立负责自己本身的职能</li>
<li>考虑重用</li>
</ul>
</li>
<li>避免逻辑重复<ul>
<li>同样的信息应该只在一处出现，不然会给以后的维护带来无穷无尽的烦恼</li>
</ul>
</li>
<li>避免if/else嵌套过深</li>
<li>配置数据分离</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>破窗理论<ul>
<li>破窗：低劣的设计、错误的决策或者糟糕的代码</li>
<li>不要留着“破窗户”不修。发现一个就修一个</li>
<li>如果没有足够的时间进行适当的修理，就先把它保留起来<ul>
<li>可以把出问题的代码放到注释中</li>
<li>显示“未实现”（#TODO）消息</li>
<li>用虚拟数据加以替代</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>沉默即赞同<ul>
<li>review代码，找不足找bug</li>
<li>及时提出意见</li>
<li>无情测试</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>代码编写优化<ul>
<li>松耦合<ul>
<li>抽离类似UI层，作为模板</li>
<li>JavaScript模板引擎，例如handlebars.js</li>
<li>函数职能分离，各自独立，必要时引用</li>
</ul>
</li>
<li>高内聚<ul>
<li>use let instead of var</li>
<li>避免对全局变量的依赖</li>
</ul>
</li>
<li>隔离应用逻辑<ul>
<li>应用逻辑是和应用功能相关的功能性代码，而不是和用户行为相关的</li>
<li>交互-&gt;触发交互函数-&gt;触发应用逻辑函数</li>
</ul>
</li>
<li>不要分发事件对象<ul>
<li>在函数向下传递的过程中，方法调用的接口参数应该逐渐精确化，传入明确要使用的参数，没有多余参数</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: ‘Project &amp;amp; Coding Guide’&lt;br&gt;date: 2016-03-03 00:33:51&lt;/p&gt;
&lt;h2 id=&quot;tags-Coding&quot;&gt;&lt;a href=&quot;#tags-Coding&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
      <category term="Projects" scheme="http://ecmadao.com/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>Don-t-Make-Me-Think</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Projects/Don-t-Make-Me-Think/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Projects/Don-t-Make-Me-Think/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#%E5%88%AB%E8%AE%A9%E6%88%91%E6%80%9D%E8%80%83">别让我思考</a></li>
<li><a href="#%E6%88%91%E4%BB%AC%E5%AE%9E%E9%99%85%E4%B8%8A%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8web%E7%9A%84">我们实际上是如何使用web的</a></li>
<li><a href="#%E4%B8%BA%E6%89%AB%E6%8F%8F%E8%AE%BE%E8%AE%A1%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E4%B8%BA%E9%98%85%E8%AF%BB%E8%AE%BE%E8%AE%A1">为扫描设计，而不是为阅读设计</a></li>
<li><a href="#%E5%BB%BA%E7%AB%8B%E6%B8%85%E6%A5%9A%E7%9A%84%E8%A7%86%E8%A7%89%E5%B1%82%E6%AC%A1">建立清楚的视觉层次</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E4%B9%A0%E6%83%AF%E7%94%A8%E6%B3%95">利用习惯用法</a></li>
<li><a href="#%E7%94%A8%E6%88%B7%E5%96%9C%E6%AC%A2%E6%97%A0%E9%9C%80%E6%80%9D%E8%80%83%E7%9A%84%E9%80%89%E6%8B%A9">用户喜欢无需思考的选择</a></li>
<li><a href="#%E7%9C%81%E7%95%A5%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E6%96%87%E5%AD%97">省略不必要的文字</a></li>
<li><a href="#%E8%AE%BE%E8%AE%A1%E5%AF%BC%E8%88%AA">设计导航</a></li>
<li><a href="#%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A1%B5">设计主页</a></li>
<li><a href="#%E5%BC%80%E5%8F%91%E5%9B%A2%E9%98%9F%E5%85%B3%E4%BA%8E%E5%8F%AF%E7%94%A8%E6%80%A7%E7%9A%84%E8%AE%A8%E8%AE%BA">开发团队关于可用性的讨论</a></li>
<li><a href="#%E5%8F%AF%E7%94%A8%E6%80%A7%E6%B5%8B%E8%AF%95">可用性测试</a><ul>
<li><a href="#%E7%84%A6%E7%82%B9%E5%B0%8F%E7%BB%84">焦点小组</a></li>
<li><a href="#%E5%8F%AF%E7%94%A8%E6%80%A7%E6%B5%8B%E8%AF%95-1">可用性测试</a></li>
</ul>
</li>
<li><a href="#%E5%B0%8A%E9%87%8D%E7%94%A8%E6%88%B7%EF%BC%8C%E5%B9%B6%E8%8E%B7%E5%BE%97%E7%94%A8%E6%88%B7%E5%B0%8A%E9%87%8D">尊重用户，并获得用户尊重</a></li>
<li><a href="#%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7">可访问性</a></li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<hr>
<p>title: “Don’t Make Me Think”<br>date: 2016-03-04 14:15:57</p>
<h2 id="tags-product"><a href="#tags-product" class="headerlink" title="tags: product"></a>tags: product</h2><h3 id="别让我思考"><a href="#别让我思考" class="headerlink" title="别让我思考"></a>别让我思考</h3><ul>
<li>减少可能让用户迷茫的东西，文案的明了性至关重要</li>
<li><strong>必要部位的强识别性</strong></li>
</ul>
<p>页面要做到不言而喻。如果不能，那至少要做到自我解释</p>
<h3 id="我们实际上是如何使用web的"><a href="#我们实际上是如何使用web的" class="headerlink" title="我们实际上是如何使用web的"></a>我们实际上是如何使用web的</h3><p>扫描/满意即可/勉强应付</p>
<ul>
<li>用户不会阅读，而是扫描</li>
<li>用户不会斟酌后仔细选择，猜测与随机占多数</li>
<li>用户很少会按照我们所设计的去使用产品，但依旧能够使用</li>
</ul>
<p><strong>网站可用性测试</strong></p>
<p>帮助用户正确使用网站，引导他成为“专家”，把握全局，那样用户有更多的可能会留在这个网站成为老用户</p>
<h3 id="为扫描设计，而不是为阅读设计"><a href="#为扫描设计，而不是为阅读设计" class="headerlink" title="为扫描设计，而不是为阅读设计"></a>为扫描设计，而不是为阅读设计</h3><ul>
<li>在每个页面上建立清楚的视觉层次</li>
<li>尽量利用习惯用法</li>
<li>把页面划分成明确定义的区域</li>
<li>明显标识可以点击的地方</li>
<li>最大限度降低干扰</li>
</ul>
<h3 id="建立清楚的视觉层次"><a href="#建立清楚的视觉层次" class="headerlink" title="建立清楚的视觉层次"></a>建立清楚的视觉层次</h3><ul>
<li>越重要的部分越突出</li>
<li>逻辑上相关的部分在视觉上也相关</li>
<li>逻辑上包含的部分在视觉上进行嵌套</li>
</ul>
<p>好的视觉层次通过预先处理页面，用一种我们能够理解的方式对页面的内容进行组织并区分优先级</p>
<h3 id="利用习惯用法"><a href="#利用习惯用法" class="headerlink" title="利用习惯用法"></a>利用习惯用法</h3><p>如果要创新，那么：</p>
<ul>
<li>新东西必须和习惯用法一样清楚、一样不言而喻，没有学习曲线</li>
<li>能够给用户带来很大价值，值得他花时间学习</li>
</ul>
<h3 id="用户喜欢无需思考的选择"><a href="#用户喜欢无需思考的选择" class="headerlink" title="用户喜欢无需思考的选择"></a>用户喜欢无需思考的选择</h3><p>“达到任何地方的点击次数”：</p>
<p>真正的问题不是到达目标之前要点击的次数，而是每次点击有多艰难–需要多少思考，还有多大的不确定性来判断自己是否做了正确选择</p>
<h3 id="省略不必要的文字"><a href="#省略不必要的文字" class="headerlink" title="省略不必要的文字"></a>省略不必要的文字</h3><p>对于欢迎文字和说明文字要精炼精炼再精炼</p>
<h3 id="设计导航"><a href="#设计导航" class="headerlink" title="设计导航"></a>设计导航</h3><ul>
<li>网站ID标识（名称/logo）</li>
<li>网站导航</li>
<li>用户可以比较方便的回退到上一步操作</li>
</ul>
<h3 id="设计主页"><a href="#设计主页" class="headerlink" title="设计主页"></a>设计主页</h3><p>最重要信息争取在首屏展现</p>
<p>网站标识</p>
<h3 id="开发团队关于可用性的讨论"><a href="#开发团队关于可用性的讨论" class="headerlink" title="开发团队关于可用性的讨论"></a>开发团队关于可用性的讨论</h3><ul>
<li>我们很可能会将个人喜好带入到产品调研和讨论中，并误认为自己喜好的也是用户所喜欢的</li>
<li>不同职位会带来不同的偏见</li>
<li>所有web用户都是独一无二的，没有什么所谓的普通用户。他们对网页的个人反应和那么多不同的变量有关系<ul>
<li>试图用一些简单的喜好来形容用户既琐碎又没有什么关系</li>
<li>好的设计会把这种复杂性考虑进去</li>
</ul>
</li>
<li>对于大部分web设计而言，没有简单的“正确”答案。良好的、一体化的设计能满足需要，也就是说，经过仔细考虑、实现和测试的设计就是好的</li>
<li>测试。通过测试观测用户的动机、理解和反应的不同</li>
</ul>
<h3 id="可用性测试"><a href="#可用性测试" class="headerlink" title="可用性测试"></a>可用性测试</h3><h4 id="焦点小组"><a href="#焦点小组" class="headerlink" title="焦点小组"></a>焦点小组</h4><p>一小组人（5~8）参加，对展现给他们的想法和设计做出反应。<br>主要价值来自参与人员彼此的反应。可以快速得到用户意见和感觉</p>
<p>可以抽象的获知用户想要什么、需要什么、喜欢什么，测试网站的概念是否有意义，价值主张是否吸引人,但不太适合用来了解网站的运行情况和如何改善网站</p>
<hr>
<h4 id="可用性测试-1"><a href="#可用性测试-1" class="headerlink" title="可用性测试"></a>可用性测试</h4><p>一次一个用户的展示内容，并要求用户：</p>
<ol>
<li>说出这是什么</li>
</ol>
<p>“理解”性测试<br>让测试用户看到产品，看他们是否理解产品，如何理解产品，理解产品的目标、价值主张、组织方式、运行方式</p>
<ol>
<li>试着用它来完成一项典型的任务</li>
</ol>
<p>观察用户是如何完成任务的，过程中会遇到哪些问题</p>
<hr>
<p>测试是一个不断迭代的过程，应该穿插在设计开发之中</p>
<p>在可用性测试结束之后：</p>
<ol>
<li>给问题分类<ul>
<li>用户不清楚概念</li>
<li>用户找不到自己想要的东西</li>
<li>内容太多了</li>
</ul>
</li>
<li>解决问题<ul>
<li>忽略“皮划艇问题”<br>“皮划艇问题”指初次使用产品时因小困惑而产生的错误，这些错误往往会在之后被自主修正，不是什么问题</li>
<li>抵制添加的冲动<br>在测试的时候看见用户没有清楚理解一些功能的作用的时候，大部分人的第一反应是为功能添加说明。而正确的解决方案往往是去除一些让人混淆的内容，而不是额外再加入其他干扰</li>
<li>不要太看重人们对新功能的要求</li>
<li>抓住够得到的果子<ul>
<li>恍然大悟型</li>
<li>便宜型</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="尊重用户，并获得用户尊重"><a href="#尊重用户，并获得用户尊重" class="headerlink" title="尊重用户，并获得用户尊重"></a>尊重用户，并获得用户尊重</h3><ul>
<li>知道人们在你网站上想做些什么，并让它明白简易</li>
<li>告诉用户他想知道的</li>
<li>尽量减少步骤</li>
<li>保证信息准确而有用，并用清楚的方式表达</li>
<li>为用户提供协助</li>
<li>容易从错误中恢复</li>
</ul>
<h3 id="可访问性"><a href="#可访问性" class="headerlink" title="可访问性"></a>可访问性</h3><p>可访问性不仅仅针对正常用户，也是对于残疾用户而言的</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Projects" scheme="http://ecmadao.com/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>“5W1H”——做设计研究的一个方法</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Projects/%E2%80%9C5W1H%E2%80%9D%E2%80%94%E2%80%94%E5%81%9A%E8%AE%BE%E8%AE%A1%E7%A0%94%E7%A9%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Projects/“5W1H”——做设计研究的一个方法/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#1-what%EF%BC%88%E4%BB%80%E4%B9%88%E4%BA%8B%E6%83%85%EF%BC%9F%EF%BC%89">1-What（什么事情？）</a></li>
<li><a href="#2-where%EF%BC%88%E4%BB%80%E4%B9%88%E5%9C%B0%E7%82%B9%EF%BC%9F%EF%BC%89">2-Where（什么地点？）</a></li>
<li><a href="#3-when%EF%BC%88%E4%BB%80%E4%B9%88%E6%97%B6%E9%97%B4%EF%BC%9F%EF%BC%89">3-When（什么时间？）</a></li>
<li><a href="#4-who%EF%BC%88%E4%BA%BA%E5%91%98%EF%BC%9F%EF%BC%89">4-Who（人员？）</a></li>
<li><a href="#5-why%EF%BC%88%E5%8E%9F%E5%9B%A0%E6%98%AF%EF%BC%9F%EF%BC%89">5-Why（原因是？）</a></li>
<li><a href="#6-how%EF%BC%88%E4%BB%80%E4%B9%88%E6%96%B9%E6%B3%95%EF%BC%9F%EF%BC%89">6-How（什么方法？）</a></li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<hr>
<p>title: “5W1H”——做设计研究的一个方法<br>date: 2016-03-03 09:31:59</p>
<h2 id="tags-product"><a href="#tags-product" class="headerlink" title="tags: product"></a>tags: product</h2><p>5W1H，此分析方法从：对象（何事 What）、地点（何地 Where）、时间（何时 When）、人员（何人 Who）、原因（何因 Why）、方法（何法 How）六个方面对事物提出问题进行思考。全面而有效率，是这个分析方法的精髓。<br>5W1H，又叫六何法，或称作6W分析法（借用How 中的W）</p>
<hr>
<h3 id="1-What（什么事情？）"><a href="#1-What（什么事情？）" class="headerlink" title="1-What（什么事情？）"></a>1-What（什么事情？）</h3><p>面对一个产品设计，我们首先要清晰知道，我们要做什么事情。我们在这个问题下主要要对产品提出质疑，比如：</p>
<ul>
<li>为什么要设计这个产品？</li>
<li>这个产品是什么东西？</li>
<li>设计这个产品能够带来什么经济、社会、文化效应？</li>
</ul>
<hr>
<h3 id="2-Where（什么地点？）"><a href="#2-Where（什么地点？）" class="headerlink" title="2-Where（什么地点？）"></a>2-Where（什么地点？）</h3><ul>
<li>这个产品在哪里销售？</li>
<li>这个产品的使用环境如何？<br>通过对销售市场的分析，可以预想到产品的未来杨子。如果是日本市场，那么要了解到日本是一个高工资、高销售的发达国家，他们对产品的要求品质感十分注重；日本同时又是一个岛国，故而他们对生态环境的要求什么苛刻，那么你设计的产品，是否要注意下环保性如何？垃圾的可回收率怎么样？是否方便垃圾的分类处理？等等这些有用而实实在在的问题会随着对地点的分析而相继展开！而如果在中东市场，是否要考虑这个地区的宗教文化特征？如果是欧洲市场，产品的安全认证是否需要格外注意？</li>
</ul>
<hr>
<h3 id="3-When（什么时间？）"><a href="#3-When（什么时间？）" class="headerlink" title="3-When（什么时间？）"></a>3-When（什么时间？）</h3><ul>
<li>这个产品在什么时间工作？</li>
<li>这个产品的工作时间是否是连续性工作？</li>
<li>冬季使用还是夏季使用？<br>这样的分析会使我们清晰认识到，这个产品的使用时间，如果是工具类产品，需要一天8小时的操作需要，那么人机方面的设计，就要更加注重；如果是冬季使用的产品，可以想象如果产品能够通过设计带给人们温暖，岂不美哉？而如果可能也要夜间使用，比如手电筒，如何能在黑暗中快速找到它？</li>
</ul>
<hr>
<h3 id="4-Who（人员？）"><a href="#4-Who（人员？）" class="headerlink" title="4-Who（人员？）"></a>4-Who（人员？）</h3><ul>
<li>这个产品给什么人用？</li>
<li>购买者又是谁？</li>
<li>男生还是女生使用？</li>
<li>受众人群的职业、喜好分析？<br>婴儿使用的产品，不仅要考虑婴儿的使用舒适度和安全性，还要考虑这个产品购买者，妈妈们的购买需求和操作便利性，全方面的分析人群的特征，会让这个产品在市场上更容易接受，继而达到预期的成功。学生使用，价位上会是一个重要标准，所以在设计之初便要考虑，生产成本的因素。</li>
</ul>
<hr>
<h3 id="5-Why（原因是？）"><a href="#5-Why（原因是？）" class="headerlink" title="5-Why（原因是？）"></a>5-Why（原因是？）</h3><ul>
<li>为什么要出现这个产品？</li>
<li>为什么我们需要这个产品？<br>追求创新，是设计的根本。通过事物根源的探寻，会让我们得到本质上的创新灵感。</li>
</ul>
<hr>
<h3 id="6-How（什么方法？）"><a href="#6-How（什么方法？）" class="headerlink" title="6-How（什么方法？）"></a>6-How（什么方法？）</h3><ul>
<li>怎么实现产品的功能？</li>
<li>有没有更好的方法实现？</li>
<li>用什么工艺、材质、颜色实现？<br>在有了大概的轮廓之后，我们会对自己提出一些问题，比如我需要怎么样设计才能实现这些问题、需要用什么材质才能保证特殊环境下产品的安全性、我换个方式实现这个功能行不行？</li>
</ul>
<p><strong>忘了摘自哪里了。。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Projects" scheme="http://ecmadao.com/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>The Pragmatic Programmer</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Projects/The%20Pragmatic%20Programmer/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Projects/The Pragmatic Programmer/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#the-pragmatic-programmer">The Pragmatic Programmer</a><ul>
<li><a href="#%E6%B3%A8%E9%87%8D%E5%AE%9E%E6%95%88%E7%9A%84%E5%93%B2%E5%AD%A6">注重实效的哲学</a><ul>
<li><a href="#%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E7%BB%B4%E6%8A%A4">软件质量与维护</a></li>
<li><a href="#%E8%BF%9B%E6%AD%A5%E5%92%8C%E6%B2%9F%E9%80%9A">进步和沟通</a></li>
</ul>
</li>
<li><a href="#%E6%B3%A8%E9%87%8D%E5%AE%9E%E6%95%88%E7%9A%84%E9%80%94%E5%BE%84">注重实效的途径</a><ul>
<li><a href="#%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D">避免重复</a></li>
<li><a href="#%E6%AD%A3%E4%BA%A4%E6%80%A7">正交性</a></li>
<li><a href="#%E5%8F%AF%E6%92%A4%E9%94%80%E6%80%A7">可撤销性</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="The-Pragmatic-Programmer"><a href="#The-Pragmatic-Programmer" class="headerlink" title="The Pragmatic Programmer"></a>The Pragmatic Programmer</h2><h3 id="注重实效的哲学"><a href="#注重实效的哲学" class="headerlink" title="注重实效的哲学"></a>注重实效的哲学</h3><h4 id="软件质量与维护"><a href="#软件质量与维护" class="headerlink" title="软件质量与维护"></a>软件质量与维护</h4><blockquote>
<p>Provide Options, Don’t Make Lame Excuses</p>
</blockquote>
<p>提供选择而不是借口，不要说做不到，要说明能够做什么来挽回局面</p>
<blockquote>
<p>Don’t Live with Broken Windows</p>
</blockquote>
<p>“破窗”见一个修一个。就算再没有时间，也要思考破窗的解决方案，留下注释，指定解决计划和日期。将破窗处于自己的掌控之中</p>
<blockquote>
<p>Make Quality a Requirements Issue</p>
</blockquote>
<ul>
<li>让质量成为需求。</li>
</ul>
<p>要学会在质量和发布时间之间做出权衡。如果你给用户某样还用的过去的东西，让他们及早使用，他们的反馈常常会把你引向更好的解决方案</p>
<ul>
<li>知道何时止步</li>
</ul>
<p>不要因为过度修饰和过于求精而摧毁完好的程序：因为它不可能完美。与其过度修饰，不如思考正确的体验和需求</p>
<h4 id="进步和沟通"><a href="#进步和沟通" class="headerlink" title="进步和沟通"></a>进步和沟通</h4><blockquote>
<p>Invest Regularly in Your Knowledge Portfolio<br>定期为自己的知识资产投资</p>
<p>Critically Analyze What You Read and Hear<br>批判的分析自己所看见的和听见的</p>
<p>It’s Both what You Say and the Way You Say It<br>说什么和怎么说一样重要。</p>
</blockquote>
<p>没有有效的交流，一个好想法也只是个没人要的孤儿。</p>
<p>只有当你在传达信息，并正确的传达给对方的时候，才是一次真正的交流。在那之前思考这些问题：</p>
<ul>
<li>你想让他们学到什么？</li>
<li>他们对你讲的什么感兴趣？</li>
<li>他们有多少经验？</li>
<li>他们想要多少细节？</li>
<li>你想让谁拥有这些信息？</li>
<li>如何促使他们听你说话？</li>
</ul>
<p>让听众参与，做倾听者：如果你想让别人听你说话，那么要先听他们说话</p>
<h3 id="注重实效的途径"><a href="#注重实效的途径" class="headerlink" title="注重实效的途径"></a>注重实效的途径</h3><h4 id="避免重复"><a href="#避免重复" class="headerlink" title="避免重复"></a>避免重复</h4><blockquote>
<p>DRY - Don’t Repeat Yourself</p>
</blockquote>
<p>关于复用组件和UI/逻辑分离这方面，可以学习React/ReactNative</p>
<p>注意元素之间的相互关联，使用推导来尽量避免不必要的重复</p>
<blockquote>
<p>Make It Easy to Reuse<br>尽量复用</p>
</blockquote>
<h4 id="正交性"><a href="#正交性" class="headerlink" title="正交性"></a>正交性</h4><p>正交性：不相依赖性/解耦性。如果两个或多个事物中发生了变化，但不会影响其他事物，则它们是正交的。当系统的各组建相互高度依赖时，就不再具有局部修正</p>
<blockquote>
<p>Eliminate Effects between Unrelated Things<br>消除无关事物之间的影响</p>
</blockquote>
<p><strong>团队内部的正交</strong></p>
<p>如果团队的组织有许多重叠，各个成员就会对责任该到困惑，或因责任共享而懈怠。不仅如此，每次的需求变动都需整个团队开一次会，因为他们中的任何人都可能收到影响。</p>
<p>把团队由责任划分为不同的小组。可以从基础设施和应用分离着手。如果应用功能的划分显而易见，那就可以依次分组，尽量将人员之间的责任正交。<strong>但不同组员之间的交流必不可少</strong></p>
<p><strong>设计与系统的正交</strong></p>
<p>系统应该由一组相互协作的模块组成，每个模块都实现不依赖于其他模块的功能。有时，这些组件被组织为多个层次，每层提供一级抽象</p>
<p>对于正交设计，有一种简单的测试方法：问自己，如果显著的改变某个特定功能背后的需求，有多少模块会受到影响？（在严格的正交系统中应该只有一个）</p>
<p><strong>不要依赖你无法控制的事物</strong></p>
<p><strong>通过构建单元测试来监测模块正交性</strong></p>
<h4 id="可撤销性"><a href="#可撤销性" class="headerlink" title="可撤销性"></a>可撤销性</h4><p>始终要考虑撤销决策的情况。因为没有决策会是最终决策，情况总是在变。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Projects" scheme="http://ecmadao.com/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>Rework</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Projects/Rework/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Projects/Rework/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#rework">Rework</a><ul>
<li><a href="#%E5%8D%B8%E8%B4%9F%E7%AF%87">卸负篇</a><ul>
<li><a href="#%E4%B8%8D%E8%A6%81%E6%8C%87%E6%9C%9B%E4%BB%8E%E9%94%99%E8%AF%AF%E4%B8%AD%E5%AD%A6%E4%B9%A0">不要指望从错误中学习</a></li>
<li><a href="#fuck-plan">Fuck Plan</a></li>
<li><a href="#%E4%BD%95%E5%BF%85%E5%A3%AE%E5%A4%A7">何必壮大</a></li>
<li><a href="#%E5%B7%A5%E4%BD%9C%E7%8B%82">工作狂</a></li>
</ul>
</li>
<li><a href="#%E8%A1%8C%E5%8A%A8%E7%AF%87">行动篇</a><ul>
<li><a href="#%E6%8C%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E7%97%92%E5%A4%84">挠自己的痒处</a></li>
<li><a href="#%E6%98%8E%E7%A1%AE%E7%AB%8B%E5%9C%BA">明确立场</a></li>
<li><a href="#%E5%AE%97%E6%97%A8">宗旨</a></li>
<li><a href="#%E4%B8%87%E4%B8%8D%E5%BE%97%E5%B7%B2%E4%B8%8D%E8%9E%8D%E8%B5%84">万不得已不融资</a></li>
<li><a href="#%E4%BD%A0%E7%9A%84%E9%9C%80%E6%B1%82%E6%B2%A1%E6%9C%89%E6%83%B3%E8%B1%A1%E7%9A%84%E9%82%A3%E4%B9%88%E5%A4%9A">你的需求没有想象的那么多</a></li>
<li><a href="#%E8%A6%81%E6%88%90%E5%B0%B1%E4%BA%8B%E4%B8%9A%EF%BC%8C%E4%B8%8D%E8%83%BD%E5%8F%AA%E6%98%AF%E5%88%9B%E4%B8%9A">要成就事业，不能只是创业</a></li>
<li><a href="#%E7%A0%B4%E9%87%9C%E6%B2%89%E8%88%9F">破釜沉舟</a></li>
<li><a href="#%E8%BD%BB%E8%A3%85%E4%B8%8A%E9%98%B5">轻装上阵</a></li>
</ul>
</li>
<li><a href="#%E8%BF%9B%E9%98%B6%E7%AF%87">进阶篇</a><ul>
<li><a href="#%E6%9D%A1%E4%BB%B6%E5%8F%97%E9%99%90%E6%98%AF%E5%A5%BD%E4%BA%8B">条件受限是好事</a></li>
<li><a href="#%E4%B8%8E%E5%85%B6%E5%81%9A%E4%B8%AA%E5%8D%8A%E6%88%90%E5%93%81%EF%BC%8C%E4%B8%8D%E5%A6%82%E5%81%9A%E5%A5%BD%E5%8D%8A%E4%B8%AA%E4%BA%A7%E5%93%81">与其做个半成品，不如做好半个产品</a></li>
<li><a href="#%E4%BB%8E%E6%A0%B8%E5%BF%83%E5%87%BA%E5%8F%91">从核心出发</a></li>
<li><a href="#%E4%B8%8D%E8%A6%81%E8%BF%87%E6%97%A9%E5%85%B3%E6%B3%A8%E7%BB%86%E8%8A%82">不要过早关注细节</a></li>
<li><a href="#%E5%81%9A%E5%87%BA%E5%86%B3%E5%AE%9A">做出决定</a></li>
<li><a href="#%E5%85%B3%E6%B3%A8%E4%B8%8D%E5%8F%98%E5%9B%A0%E7%B4%A0">关注不变因素</a></li>
<li><a href="#%E7%AB%8B%E9%A9%AC%E4%B8%8A%E7%BA%BF">立马上线</a></li>
<li><a href="#%E9%80%80%E5%87%BA">退出</a></li>
<li><a href="#%E6%8C%96%E6%8E%98%E5%89%AF%E4%BA%A7%E5%93%81">挖掘副产品</a></li>
</ul>
</li>
<li><a href="#%E6%95%88%E7%8E%87%E7%AF%87">效率篇</a><ul>
<li><a href="#%E8%B5%9E%E5%90%8C%E7%9A%84%E9%94%99%E8%A7%89">赞同的错觉</a></li>
<li><a href="#%E6%89%93%E5%B2%94%E6%98%AF%E6%95%88%E7%8E%87%E7%9A%84%E6%95%8C%E4%BA%BA">打岔是效率的敌人</a></li>
<li><a href="#%E4%BC%9A%E8%AE%AE%E6%9C%89%E6%AF%92">会议有毒</a></li>
<li><a href="#%E5%88%9A%E5%88%9A%E5%A5%BD%E5%B0%B1%E6%98%AF%E7%9C%9F%E7%9A%84%E5%A5%BD">刚刚好就是真的好</a></li>
<li><a href="#%E9%80%9F%E6%88%98%E9%80%9F%E5%86%B3">速战速决</a></li>
<li><a href="#%E8%AF%A5%E7%9D%A1%E8%A7%89%E6%97%B6%E5%B0%B1%E7%9D%A1%E8%A7%89">该睡觉时就睡觉</a></li>
<li><a href="#%E5%88%AB%E5%9C%A8%E6%84%8F%E9%A2%84%E4%BC%B0">别在意预估</a></li>
<li><a href="#%E7%BD%97%E5%88%97%E9%97%AE%E9%A2%98">罗列问题</a></li>
</ul>
</li>
<li><a href="#%E5%AF%B9%E6%89%8B%E7%AF%87">对手篇</a><ul>
<li><a href="#%E6%8B%92%E7%BB%9D%E7%85%A7%E6%90%AC">拒绝照搬</a></li>
<li><a href="#%E5%8E%BB%E5%95%86%E5%93%81%E5%8C%96">去商品化</a></li>
<li><a href="#%E7%BB%99%E7%AB%9E%E4%BA%89%E5%8A%9B%E5%81%9A%E5%87%8F%E6%B3%95">给竞争力做减法</a></li>
<li><a href="#who-care">Who care?</a></li>
</ul>
</li>
<li><a href="#%E6%8E%A8%E5%B9%BF%E7%AF%87">推广篇</a><ul>
<li><a href="#%E7%94%98%E4%BA%8E%E4%BD%8E%E5%BE%AE">甘于低微</a></li>
<li><a href="#%E6%99%AE%E5%8F%8A%E7%9F%A5%E8%AF%86%EF%BC%8C%E8%B5%A2%E5%BE%97%E7%AB%9E%E4%BA%89">普及知识，赢得竞争</a></li>
<li><a href="#%E8%BD%AC%E5%88%B0%E5%B9%95%E5%90%8E%E7%9C%8B%E7%9C%8B">转到幕后看看</a></li>
<li><a href="#%E5%AD%A6%E4%B9%A0%E8%8D%AF%E8%B4%A9%E5%AD%90">学习药贩子</a></li>
<li><a href="#%E5%B8%82%E5%9C%BA%E8%90%A5%E9%94%80%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E9%83%A8%E9%97%A8%E7%9A%84%E4%BA%8B">市场营销不是一个部门的事</a></li>
</ul>
</li>
<li><a href="#%E6%8B%9B%E8%81%98%E7%AF%87">招聘篇</a><ul>
<li><a href="#%E4%BA%B2%E5%8A%9B%E4%BA%B2%E4%B8%BA">亲力亲为</a></li>
<li><a href="#%E5%BF%8D%E5%8F%97%E4%B8%8D%E4%BA%86%E6%97%B6%E5%86%8D%E6%8B%9B%E4%BA%BA">忍受不了时再招人</a></li>
<li><a href="#%E9%80%82%E6%97%B6%E6%94%BE%E5%BC%83%E7%89%9B%E4%BA%BA">适时放弃牛人</a></li>
<li><a href="#%E9%B8%A1%E5%B0%BE%E9%85%92%E4%BC%9A%E4%B8%8A%E7%9A%84%E9%99%8C%E7%94%9F%E4%BA%BA">鸡尾酒会上的陌生人</a></li>
<li><a href="#%E5%8F%AF%E7%AC%91%E7%9A%84%E7%AE%80%E5%8E%86">可笑的简历</a></li>
<li><a href="#%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%E5%A4%9A%E5%8F%88%E6%80%8E%E6%A0%B7">工作经验多又怎样</a></li>
<li><a href="#%E5%B8%B8%E8%A7%84%E6%95%99%E8%82%B2%E4%B8%8D%E5%80%BC%E4%B8%80%E6%8F%90">常规教育不值一提</a></li>
<li><a href="#%E8%AF%95%E7%94%A8%E6%9C%9F%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91">试用期必不可少</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="Rework"><a href="#Rework" class="headerlink" title="Rework"></a>Rework</h2><p><strong>简短版</strong></p>
<ul>
<li>不能死守计划，要懂得变通</li>
<li>尽量将任务划分为阶段性的迭代，避免团队疲惫</li>
<li>公司的规模不是越大越好。要控制人员成本，只招最好最合适的人，轻装上阵</li>
<li>避免加班，杜绝加班文化</li>
<li>精简会议，避免思路打岔</li>
<li>有人喜爱你就有人会憎恶你。即便如此也不要平平淡淡的平庸</li>
<li>不要在意去制定退出策略</li>
<li>砍掉多余需求，只留项目核心。先做好它并上线，再关注更多的细节</li>
<li>休息很重要。记得睡觉</li>
<li>传播价值，收获听众，培养一批粉丝般的用户</li>
<li>避免扩充太多员工，你需要的能够直言不讳独当一面的人</li>
<li>简历不代表什么，工作经验也不代表什么；真正的差别在于个人的努力程度、性格差异以及智力水平</li>
</ul>
<hr>
<p><strong>TLRD，太长别看版</strong></p>
<h3 id="卸负篇"><a href="#卸负篇" class="headerlink" title="卸负篇"></a>卸负篇</h3><h4 id="不要指望从错误中学习"><a href="#不要指望从错误中学习" class="headerlink" title="不要指望从错误中学习"></a>不要指望从错误中学习</h4><p>经历错误不代表下一次就能成功。你依旧很可能不知道下一步该怎么做，能学到的只是不要重蹈覆辙而已。反之，经历过成功，更有可能总结出相应的技巧和规律，以便之后做的更好。</p>
<h4 id="Fuck-Plan"><a href="#Fuck-Plan" class="headerlink" title="Fuck Plan"></a>Fuck Plan</h4><blockquote>
<p>计划和即兴发挥不会合拍</p>
</blockquote>
<p>做计划就是在用过去推动未来。未来怎样我们一无所知，如果只凭现在的状况，就对未来制定好一系列规划并循规蹈矩不知变通，就相当于蒙蔽了双眼。</p>
<p>我们必须要学会即兴发挥。学会应对突如其然的变化。有时候你得说服自己：”好吧，之前的计划已经无法应对现状了，需要那样做才比较靠谱。”</p>
<p><strong>长期计划中的时间表纯属无稽之谈。</strong></p>
<h4 id="何必壮大"><a href="#何必壮大" class="headerlink" title="何必壮大"></a>何必壮大</h4><p>公司的规模并不是越大越好。大小并不是评估事业的标准。也许你的公司最佳规模就是5个人，或者50个人，500个人，也或许你只需要一个笔记本电脑和一个人就行。</p>
<p>不要幻想把公司做大到多少规模，而是慢慢发展。不得不承认，走一步看一步才是常态。<strong>避免井喷式发展</strong> – 这会使公司扩张过头，错过最佳规模。</p>
<p>无论公司大小，只要能够盈利就是好公司。</p>
<h4 id="工作狂"><a href="#工作狂" class="headerlink" title="工作狂"></a>工作狂</h4><p>工作狂虽然投入工作时间多，但普遍效率低下。仅仅靠蛮力来弥补思维上的惰性，带来的只能是低效和低质量。</p>
<p>尤其需要注意的是，工作狂的存在会使不以加班为乐的员工无所适从，并严重影响团队环境。这种病态的加班”文化”会使正常的员工心怀愧疚、士气低落。不仅如此，人们还会因此陷入一种”跟风状态” – 每个人都在义务加班，根本不管有没有生产力。</p>
<h3 id="行动篇"><a href="#行动篇" class="headerlink" title="行动篇"></a>行动篇</h3><blockquote>
<p>尽管冲着有价值的方向努力</p>
</blockquote>
<h4 id="挠自己的痒处"><a href="#挠自己的痒处" class="headerlink" title="挠自己的痒处"></a>挠自己的痒处</h4><p>尝试去解决自己的实际问题。这种方法的最大优势就在于能让你爱上自己的产品。你必须十分了解其中存在的问题和价值，除此以外别无他法。</p>
<h4 id="明确立场"><a href="#明确立场" class="headerlink" title="明确立场"></a>明确立场</h4><p>起步之后，你必须一直牢记自己当初为什么要做这件事。<em>创业并不只是一个产品或一项服务那么简单。必须心怀信念，了解自己到底是为什么而奋斗，并且要让世人明白你的信念。</em></p>
<p>坚定的信念可以使你赢得粉丝和支持。但在这个过程中，必然也会有人说你傲慢、冷漠。但这就是人生。<strong>有人喜欢你，就有人会憎恶你。但这都比平平庸庸的要好太多。</strong></p>
<p>我们追求简洁的设计，因为大多数软件都过于复杂：太多特性、太多按钮、太多选项和困惑。但我们这样追求的产品必然不会必然不会适合每一个人，但这没有关系。我们愿意为了那些更加深爱我们产品的客户而放弃另外一些客户。这就是我们的立场。</p>
<p>如果连你自己都不知道自己到底相信什么，那么一切都会成为悖论，你做的任何事情都可以被人反驳。然而，一旦你的立场坚定，那么如何决策就显而易见了。</p>
<h4 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h4><p>坚守某种信念不仅仅是把它写下来。不但要相信它，还要让它成为你的生活方式。</p>
<h4 id="万不得已不融资"><a href="#万不得已不融资" class="headerlink" title="万不得已不融资"></a>万不得已不融资</h4><p>如果融资，客户就不再是你的第一位。花了别人的钱，会使你的事业最终去迎合投资人，而不是客户。</p>
<p>此外，融资极其费神。融资是一件困难重重、耗费精力的事情。需要花费数月开会讨论、研究法律、签订合同等等。这些繁琐的事情会浪费你大量的精力，而这些时间本来就应该被用于创建伟大的事业。</p>
<h4 id="你的需求没有想象的那么多"><a href="#你的需求没有想象的那么多" class="headerlink" title="你的需求没有想象的那么多"></a>你的需求没有想象的那么多</h4><p>假设我们规划了成堆的需求。但只有一两周可以做。在动手之前不妨先静心想一想，这些都是必须的吗？每个需求都值得花费你那么多精力吗？</p>
<h4 id="要成就事业，不能只是创业"><a href="#要成就事业，不能只是创业" class="headerlink" title="要成就事业，不能只是创业"></a>要成就事业，不能只是创业</h4><p>无论业务的新老，它们都是由相同的市场力量和经济规律所主导。人们得创造收入、承担花销。公司要么盈利，要么倒闭。</p>
<p>创业之初不要有任何依赖思想。不要想着之后总会有方法赚钱。相反，要创立真正的事业。真正的事业永远与现实的问题息息相关，比如说账单和员工薪水。真正的事业从创始的第一天开始就要求你去操心如何盈利的问题。真正的事业拒绝创业者使用 “没关系，创业嘛！” 这样的借口去掩盖深层次的问题。一开始就要去做真正的事业。</p>
<h4 id="破釜沉舟"><a href="#破釜沉舟" class="headerlink" title="破釜沉舟"></a>破釜沉舟</h4><p>常常可见一种说法（尤其是来自投资人）：”你的退出策略是什么？（万一创业不成功，你怎么办？）” 问题是，一个连事业都还没创建起来的人，就在思考如何逃命，WTF？</p>
<p><em>真正需要的是承若策略，而不是退出策略。你应当考虑的是如何把项目做起来，而不是如何跳船逃生。如果你的整个策略都是建立在逃跑的基础上，你们你一开始就不会走得太远。</em></p>
<h4 id="轻装上阵"><a href="#轻装上阵" class="headerlink" title="轻装上阵"></a>轻装上阵</h4><p>保持小巧。一旦变大，就难以再次变小。负担来自于：</p>
<ul>
<li>人员过剩</li>
<li>会议</li>
<li>繁琐的流程</li>
<li>无用的长期规划</li>
<li>办公室政治</li>
<li>等等。。</li>
</ul>
<p>航母级的公司想要做出改变，要花很多年的时间。他们说得多、做得少；会议多、实干少。但如果你始终保持轻装上阵，就能快速做出改变：包括你的整个业务模式、产品、特性设置或者营销手段。一旦出错，都可以很快得到改正，还能随时改变优先级、产品组合或者关注点。重要的是，可以随时改变主意。</p>
<h3 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h3><blockquote>
<p>项目周期和需求决策</p>
</blockquote>
<h4 id="条件受限是好事"><a href="#条件受限是好事" class="headerlink" title="条件受限是好事"></a>条件受限是好事</h4><p>条件受限的优势在于，它可以激发你在现有条件下完成任务的能力；没有一点可以浪费的空间，一切都需要你去发挥最大的创造力。</p>
<p>如果可以的话，不妨尝试一下，看看你仅仅利用现有的资源可以走多远。</p>
<h4 id="与其做个半成品，不如做好半个产品"><a href="#与其做个半成品，不如做好半个产品" class="headerlink" title="与其做个半成品，不如做好半个产品"></a>与其做个半成品，不如做好半个产品</h4><p>砍掉多余的野心。假设可用的时间紧迫到不得不砍掉很多功能，然后针对核心努力打造。</p>
<h4 id="从核心出发"><a href="#从核心出发" class="headerlink" title="从核心出发"></a>从核心出发</h4><p>判断出自己事业的核心。在你的项目中，哪些是不能被拿掉，哪些又是可有可无的？如果有的东西去掉了也不会对自己的业务造成严重影响，你还能继续干下去，那这些东西就不是事业的核心。</p>
<p>找到核心，把所有精力都集中在这个中心上，然后把它做的越强越好。</p>
<h4 id="不要过早关注细节"><a href="#不要过早关注细节" class="headerlink" title="不要过早关注细节"></a>不要过早关注细节</h4><p>细节很重要。细节可以产品差异。但过早的关注细节则会带来异议、过多的会议和决策，以及延期。你很有可能在浪费时间，做一些之后还会改变的决定。所以至少是在早期的一些阶段里，不要过于在意细节。先把基础打牢，再关注其他东西。</p>
<h4 id="做出决定"><a href="#做出决定" class="headerlink" title="做出决定"></a>做出决定</h4><p>做出决定就是取得进展。一旦为了等待完美答案而推迟决定，问题就会接踵而来。事情往往不会向你想象的方向顺利发展，拖得越久问题越多。</p>
<p>很重要的一点是：你不会靠一个决定过一辈子。如果当时的决定不合适，之后也可以再改。不要因为事前的过度分析和犹豫不决而把事前搞砸。</p>
<p><strong>项目周期过长会打击士气</strong>，开发时间越长，成功的可能性越低。只要有足够的动力和士气，就要趁热打铁果断推进。</p>
<h4 id="关注不变因素"><a href="#关注不变因素" class="headerlink" title="关注不变因素"></a>关注不变因素</h4><p>时尚会凋零，但总有一些核心，其本质是不变的。</p>
<h4 id="立马上线"><a href="#立马上线" class="headerlink" title="立马上线"></a>立马上线</h4><p>你的产品和服务什么时候能做出来？你打算什么时候把它推向市场？什么时候让人们拥有它？这个时间点可能比你想象的要早得多。如果已经实现了产品的基本功能，那不妨把它亮出来。</p>
<p>虽然也许你得产品有很多要改进的地方，但这不代表它不能使用。不要因为一点遗留问题而把整个产品扣留下来。只有不影响基本使用，那遗留问题就可以等事后解决，而且往后放一放或许能想到更好的解决方案。</p>
<p>为了能够达成立马上线的目标，你或许要假设一下，如果你的业务在近期就必须推出，比如一周以内，那哪些部分是可以砍掉的呢？不妨设定定死的 deadline，催促自己砍掉核心以外的部分。</p>
<h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><p>埋头干你认为应该干的事情很简单，但抬头问问自己为什么要这么做则难得多。在埋头苦干之前，不妨问自己几个问题：</p>
<ul>
<li>为什么要这么做？为谁做？谁会收益？任务背后的动机是什么？<strong>（任务来源和用户）</strong></li>
<li>你在解决什么问题？当前的问题是什么？为什么会有这个问题？<strong>（需求来源）</strong></li>
<li>做的东西真的有用吗？你是在做一个有实用价值的东西，还是仅仅做一个酷东西？酷的东西会让人产生审美疲劳，而实用的则不会。<strong>（需求意义）</strong></li>
<li>你加上的东西有价值吗？画蛇添足很容易，画龙点睛却很难。价值和工期之间如何取得一个平衡？<strong>（开发周期）</strong></li>
<li>这种方法更简单吗？有没有更好的解决方案？<strong>（解决方案）</strong></li>
<li>没有其他更值得做的事情了吗？在所有事情里面它的紧急度是多少呢？<strong>（任务权重）</strong></li>
<li>这么做值得吗？对团队产生什么样的影响？对项目和用户又有什么影响？<strong>（整体权衡）</strong></li>
</ul>
<p>如果经过这些思考，发现要做的事情在某些环节上有问题，不妨退出，将它打回重新思考/优化。</p>
<h4 id="挖掘副产品"><a href="#挖掘副产品" class="headerlink" title="挖掘副产品"></a>挖掘副产品</h4><h3 id="效率篇"><a href="#效率篇" class="headerlink" title="效率篇"></a>效率篇</h3><h4 id="赞同的错觉"><a href="#赞同的错觉" class="headerlink" title="赞同的错觉"></a>赞同的错觉</h4><p>口头说明往往会出现歧义，甚至文字也无法保障你的思想完全转达给了对方。如果一定要说明某件事，那不妨务实一点。不要描述，直接用画的方式，甚至小 demo 也是 ok 的。</p>
<p>抽象报告（比如文本）会给人造成认知错觉。让100个人读同一段话时，他们可能会想象出100种意思。</p>
<h4 id="打岔是效率的敌人"><a href="#打岔是效率的敌人" class="headerlink" title="打岔是效率的敌人"></a>打岔是效率的敌人</h4><h4 id="会议有毒"><a href="#会议有毒" class="headerlink" title="会议有毒"></a>会议有毒</h4><h4 id="刚刚好就是真的好"><a href="#刚刚好就是真的好" class="headerlink" title="刚刚好就是真的好"></a>刚刚好就是真的好</h4><p>不要沉迷于用复杂的方法去解决问题。找一个四两拨千斤的解决方案，以最小的投入获得最大产出。</p>
<p>在条件有限时，哪怕解决方案可能很 low 很菜，但未必就不是好方法。如果有合适的解决办法，就可以先用上，这总比浪费资源、甚至因为无法承担复杂的解决方案而在那干等要强。之后，你随时都可以把 “刚刚好” 变成 “特别棒”。</p>
<ul>
<li><a href="https://www.zhihu.com/question/33634376/answer/125936478" target="_blank" rel="external">知乎：有哪些看起来很高端的技术其实原理很暴力很初级？</a></li>
</ul>
<h4 id="速战速决"><a href="#速战速决" class="headerlink" title="速战速决"></a>速战速决</h4><p>避免周期很长的项目；或是把长期项目分段，确保团队可以经常性在短周期内取得阶段性的胜利。这样既能鼓足团队干劲，也能让客户有所惦记。</p>
<h4 id="该睡觉时就睡觉"><a href="#该睡觉时就睡觉" class="headerlink" title="该睡觉时就睡觉"></a>该睡觉时就睡觉</h4><h4 id="别在意预估"><a href="#别在意预估" class="headerlink" title="别在意预估"></a>别在意预估</h4><p>预估往往不准确。现实世界并不会与所谓的最佳案例情境相吻合。而为了提高预估精准度，最好的做法则是像上面所说，将项目分成小阶段，针对各个阶段制定预估。</p>
<h4 id="罗列问题"><a href="#罗列问题" class="headerlink" title="罗列问题"></a>罗列问题</h4><p>只要有可能，就把问题拆解成一个一个的小片段，直到你能够完全迅速地解决每一个小问题。这样安排你的任务，就能对你的生产力和积极性产生惊人的影响。</p>
<p>除此以外，在排列时可以按照事情的轻重缓急来排序。</p>
<h3 id="对手篇"><a href="#对手篇" class="headerlink" title="对手篇"></a>对手篇</h3><h4 id="拒绝照搬"><a href="#拒绝照搬" class="headerlink" title="拒绝照搬"></a>拒绝照搬</h4><p>如果盲从对手，就无法掌握主动，永远只能被动接受。如果你无法领跑，就只能尾随，生产的也只是过时的产品 – 只是个仿制品、次品，这样是没有生存空间的。</p>
<h4 id="去商品化"><a href="#去商品化" class="headerlink" title="去商品化"></a>去商品化</h4><p>让公司的理念、让你自己成为产品的一部分，将你独一无二的想法注入到产品当中，让它与众不同，将它变成一个别人做不到的事情。这些特性将成为产品的独特烙印，竞争者们即便模仿你的产品，但也无法模仿它的独特性。</p>
<h4 id="给竞争力做减法"><a href="#给竞争力做减法" class="headerlink" title="给竞争力做减法"></a>给竞争力做减法</h4><p>传统的竞争方式认为我们必须胜人一筹：对手有 4 种功能，我们就要做 5 种；他们有 50 个员工，我们就要有 100 个。</p>
<p>但实际上这种冷战式的攀比思维会把公司引上绝路。这是一场消耗大量金钱、时间、经历的军备竞赛，可能会陷入长期的防御战中。</p>
<p>那该怎么做呢？<strong>比对手少，借此击败对方</strong>。有时候不需要那么多东西，我们需要的是把核心内容做好做精，把自身的感情和特色融入产品。哪怕这看起来是在示弱，但起码我们不必再分散多余的精力，不用再耗费时间关注恼人的对手。</p>
<p>要像你的对手推广他们的多功能产品一样，充满激情的推广你的简约产品。</p>
<h4 id="Who-care"><a href="#Who-care" class="headerlink" title="Who care?"></a>Who care?</h4><p>谁管对手在干嘛？你的竞争对手的不值得去关注。因为为对手操心会转化为一种纠结的状态，你会去关注他们现在在做什么？下一步要做什么？该如何应对？对方的每一个小动作都落入你的精密计算中，这种心态很恐怖，会让人沉浸在紧张和焦虑之中。这种心态构思不出任何好想法。</p>
<h3 id="推广篇"><a href="#推广篇" class="headerlink" title="推广篇"></a>推广篇</h3><h4 id="甘于低微"><a href="#甘于低微" class="headerlink" title="甘于低微"></a>甘于低微</h4><p>默默无闻是一个绝佳的状态，要庆幸自己目前还身处暗处。要充分利用这段时间，这时犯再大了错也不会有很多人知晓。要保持低调，你可以充分利用这段时间继续调整你的策略，解决纠结的问题、测试各种创意、尝试新事物。没有人认识你，所以弄砸了也没关系，可以最大程度的保持住你的自尊和自信。</p>
<p>要牢记，在事业做大之后，就不可避免的要走稳健路线，变得更为保守、更难去冒险。这就是僵化的起点、创新变革的终点。</p>
<h4 id="普及知识，赢得竞争"><a href="#普及知识，赢得竞争" class="headerlink" title="普及知识，赢得竞争"></a>普及知识，赢得竞争</h4><p>传道授业能为你建立起凝聚力，这是传统市场策略不可望其项背的。通过杂志或者网络广告去赚钱是一回事；通过讲授知识来赢得人们的忠诚则建立起了一种截然不同的关系。后者会更加尊重你、相信你。即便他们不用你的产品，也会是你的粉丝。</p>
<h4 id="转到幕后看看"><a href="#转到幕后看看" class="headerlink" title="转到幕后看看"></a>转到幕后看看</h4><p>人们对产品的制作过程充满好奇。让人们走入幕后，能改善他们和你直接的关系。他们会感到与你亲近起来，将你视为一个常人，而不是一个面目模糊的公司。他们将在你的产品中看到你在后台流淌的汗水和努力，会对你的工作产生更加深刻的理解和真挚的感激。</p>
<h4 id="学习药贩子"><a href="#学习药贩子" class="headerlink" title="学习药贩子"></a>学习药贩子</h4><p>把产品做成小份试用装，并为它准备一份易于阅读理解的产品说明书，让人们能够不花一分钱、不必浪费太多时间就能试用你的产品。</p>
<h4 id="市场营销不是一个部门的事"><a href="#市场营销不是一个部门的事" class="headerlink" title="市场营销不是一个部门的事"></a>市场营销不是一个部门的事</h4><p>市场营销是需要你公司的全体员工一年365天、一周7天、一天24小时时刻要去做的工作。</p>
<ul>
<li>每次你发出邮件时，都是市场营销</li>
<li>每次有人使用你的产品，就是市场营销</li>
<li>你在网站下写下的每个字，都是市场营销</li>
<li>如果你在设计软件，每条错误提示就是市场营销</li>
<li>如果你开的是餐馆，那么餐后的薄荷糖就是市场营销</li>
<li>如果从事的是服务业，在给客户的账单上也能进行市场营销</li>
</ul>
<p>在这些小细节的优秀表现，要比给客户送礼品重要的多。营销不是几个人的事情，而是所有团队所有工作的总和。</p>
<h3 id="招聘篇"><a href="#招聘篇" class="headerlink" title="招聘篇"></a>招聘篇</h3><h4 id="亲力亲为"><a href="#亲力亲为" class="headerlink" title="亲力亲为"></a>亲力亲为</h4><p>在你亲自尝试做这份工作之前，永远不要雇人去做。只有这样，你才能了解这项工作的本质，才会懂得如何判断工作完成的好坏，才会知道怎样写出符合实际的岗位招聘需求，也才会清除在面试中该问什么问题；你才能知道该雇佣全职员工还是兼职员工，是将工作直接外包还是坚持自己搞定（强烈推荐后者）。</p>
<p>你应该让自己密切融入业务的方方面面，否则你就会陷入一片茫然。把自己的命运交到别人的手上，这是非常危险的。</p>
<h4 id="忍受不了时再招人"><a href="#忍受不了时再招人" class="headerlink" title="忍受不了时再招人"></a>忍受不了时再招人</h4><p>不要为了贪图一时高兴而招人。当你在很长一段时间内都被超负荷的工作所困扰，这才是招人的正确时机，此时出现了一些你无法再亲力亲为的事情，你发现工作质量有所下滑，令你感到忍受不了了，这时才是招人的最佳时机。不要提前招人。</p>
<h4 id="适时放弃牛人"><a href="#适时放弃牛人" class="headerlink" title="适时放弃牛人"></a>适时放弃牛人</h4><p>放弃那些你并不需要的牛人，即便你觉得这是个人才。把有能力的人招进来但却无所事事，这对公司来说有害无益。</p>
<p>一旦人浮于事，问题就会显现出来。你得开始没事找事地设计出一些工作，好让所有人都忙碌起来。虚无的工作带来虚无的项目，而虚无的项目花费的却是实实在在的成本，带来的也是实实在在的麻烦。</p>
<h4 id="鸡尾酒会上的陌生人"><a href="#鸡尾酒会上的陌生人" class="headerlink" title="鸡尾酒会上的陌生人"></a>鸡尾酒会上的陌生人</h4><p>短期内大批招人的后果就同陷入”全是陌生人的鸡尾酒会”一样。你身边充斥着新面孔，每个人都彬彬有礼，每个人都努力避免矛盾或冲突，没有人说：”这点子真烂。” 人们都一团和气，互不攻击。</p>
<p><em>但实际上，一团和气是难以成事的。这种一团和气的氛围就是公司陷入麻烦的根源。当有人把事情弄的一团糟时，总得有人直言不讳的说出来。否则，你就是在经营一个既不惹人恨、又不招人爱的公司。</em></p>
<h4 id="可笑的简历"><a href="#可笑的简历" class="headerlink" title="可笑的简历"></a>可笑的简历</h4><p>简历不可靠。杜撰一份简历太容易了，上面也总是充斥着毫无意义的内容，而且大部分信息是无法验证的。</p>
<h4 id="工作经验多又怎样"><a href="#工作经验多又怎样" class="headerlink" title="工作经验多又怎样"></a>工作经验多又怎样</h4><p>招聘时要求具有基本经验水平是没错的。可以把目标放在那些具有半年至一年工作经验的应聘者身上，要养成一定的工作习惯、掌握工作方法、学习相关技巧什么的，确实至少需要那么长时间。</p>
<p>但是在那之后，成长曲线就开始趋于平缓了。 <strong>一个具有6个月工作经验的应聘者和一个具有6年经验的应聘者相比，其差别小得令人吃惊。真正的差别在于个人的努力程度、性格差异以及智力水平。</strong> </p>
<h4 id="常规教育不值一提"><a href="#常规教育不值一提" class="headerlink" title="常规教育不值一提"></a>常规教育不值一提</h4><blockquote>
<p>我从来不把我自己受过的正规学校教育等同于我的受教育程度 – 马克吐温</p>
</blockquote>
<p>谨记：现实世界中的人才库要远远大于考高分、上重点大学的那一拨人</p>
<h4 id="试用期必不可少"><a href="#试用期必不可少" class="headerlink" title="试用期必不可少"></a>试用期必不可少</h4><p>一旦进入实际工作环境中，一个人的真实水平就会体现出来。翻看作品、查阅简历、约见面试，那是一回事；实际和人搭档干活，那又是另外一回事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Projects" scheme="http://ecmadao.com/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>关于产品</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Projects/%E5%85%B3%E4%BA%8E%E4%BA%A7%E5%93%81/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Projects/关于产品/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#%E5%85%B3%E4%BA%8E%E4%BA%A7%E5%93%81">关于产品</a></li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="关于产品"><a href="#关于产品" class="headerlink" title="关于产品"></a>关于产品</h2><ul>
<li>只是去判断『这是对的』、『这是错的』，而不是去观察环境发生的变化，只是低阶产品经理的思维方式</li>
<li>准确地把握重点、梳理体系、大胆论断，是产品经理的基本功之一</li>
<li>观点未必全收，思考方式都可以反复借鉴</li>
<li>拆分设计的层次<ul>
<li>区分层次和保证逻辑的通顺性</li>
<li>根据不同层次的特点去设计。怎样把平时产品设计的核心思想抽象出来</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Projects" scheme="http://ecmadao.com/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>关于文案</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Projects/%E5%85%B3%E4%BA%8E%E6%96%87%E6%A1%88/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Projects/关于文案/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#%E5%85%B3%E4%BA%8E%E6%96%87%E6%A1%88">关于文案</a><ul>
<li><a href="#%E4%B8%B0%E5%AF%8C%E4%BA%A7%E5%93%81%E7%9A%84%E4%BA%BA%E6%A0%BC%E5%BD%A2%E6%80%81">丰富产品的人格形态</a></li>
<li><a href="#%E8%B7%B3%E5%87%BA%E6%80%9D%E7%BB%B4%E5%AE%9A%E5%BC%8F%EF%BC%8C%E4%B8%8D%E8%A6%81%E8%87%AA%E5%97%A8">跳出思维定式，不要自嗨</a></li>
<li><a href="#%E9%80%9A%E8%BF%87%E6%96%87%E6%A1%88%E5%BC%95%E5%AF%BC%E7%94%A8%E6%88%B7%E4%BB%98%E5%87%BA%E8%A1%8C%E5%8A%A8">通过文案引导用户付出行动</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="关于文案"><a href="#关于文案" class="headerlink" title="关于文案"></a>关于文案</h2><ul>
<li><p>让真正的读者紧跟我们的思想。同时，要尽可能的把我们的信息传递的清楚</p>
</li>
<li><p>宁可口语化也不要太商务</p>
</li>
<li><p>没有感觉？去看看Amazon上的产品评论</p>
</li>
<li><p>客户驱动型。他们为什么那么说？他们需要什么？他们如何说话，如何评论？记录他们的习惯，记录他们的发展状况</p>
</li>
</ul>
<h3 id="丰富产品的人格形态"><a href="#丰富产品的人格形态" class="headerlink" title="丰富产品的人格形态"></a>丰富产品的人格形态</h3><p>通过你的文案为你的产品创造出一个丰满的人格形象。除去文案本身的堆砌，如何调取用户的记忆，让用户根据文案，从记忆中选出一个近似的人格形象和产品匹配，是至关重要的一步。</p>
<h3 id="跳出思维定式，不要自嗨"><a href="#跳出思维定式，不要自嗨" class="headerlink" title="跳出思维定式，不要自嗨"></a>跳出思维定式，不要自嗨</h3><p><a href="http://uxren.cn/?p=24554&amp;utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">李叫兽：你的文案，具体能唤起什么？</a></p>
<p>当我们看见信息的时候，不会直接处理该信息，而是从记忆中提取出类似的信息再进行处理。不同人的大脑记忆必然不同，也就会使我们看见不同信息的时候调取的记忆不同，所以我们对待信息的感受和方式也不同。</p>
<p>比方说，公司出了一段表达自己奋斗经历的文案。当公司创始人看见它的时候，会调取出自己当年奋斗的经历，自然非常感动。然对于用户，尤其是没有相关经历的普通用户，则就“关我屁事”了。</p>
<p>所以，避免自嗨型文案的关键是，在创造文案的过程中，不断反问思考，自己有没有陷入自身经历和记忆的深坑。否则那样的话，感动了自己，我们想要打动的用户却根本无所谓。</p>
<p>反之，我们应该思考，我们希望用户看见文案的时候能够调用什么样的记忆。不同的记忆会让用户对产品品牌产生不同的认知。</p>
<h3 id="通过文案引导用户付出行动"><a href="#通过文案引导用户付出行动" class="headerlink" title="通过文案引导用户付出行动"></a>通过文案引导用户付出行动</h3><p>不要想着在用户第一次尝试你的产品的时候把自己的想法灌输给他，而是想办法让他足够感兴趣之后再进行下一步</p>
<p>那么用户为什么要做一件事？</p>
<p>做一件事的时候会调用三种情感：</p>
<ul>
<li>认知（“我认为XX是XX”）</li>
<li>情感（“我感受到了XX”）</li>
<li>欲望（“我想要XX”）</li>
</ul>
<p>因此：</p>
<ul>
<li>用户看见文案的时候，会从自身记忆中调用什么样的认知？</li>
<li>他们可能会因此而产生什么样的情绪？</li>
<li>是否会因此产生特定的欲望？</li>
</ul>
<p><strong>文案是为了影响别人而存在的，而不是为了影响自己而存在的</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Projects" scheme="http://ecmadao.com/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>创业YC课</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Projects/%E5%88%9B%E4%B8%9AYC%E8%AF%BE/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Projects/创业YC课/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#%E5%88%9B%E4%B8%9Ayc%E8%AF%BE">创业YC课</a><ul>
<li><a href="#%E6%8B%9B%E8%81%98">招聘</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="创业YC课"><a href="#创业YC课" class="headerlink" title="创业YC课"></a>创业YC课</h2><ul>
<li>进入有发展前景的市场</li>
<li>市场现状，消费者的真正需求</li>
<li>与其想吸引大批用户，不如先打牢小部分用户基础</li>
<li>初期需要少量基础用户做好产品反馈</li>
<li>要能够非常了解自己的用户</li>
<li>小而紧凑的反馈环，快速响应并做出改善</li>
</ul>
<hr>
<h3 id="招聘"><a href="#招聘" class="headerlink" title="招聘"></a>招聘</h3><p>是否愿意和对方长期相处<br>如果角色对换是否愿意成为对方的员工</p>
<hr>
<p>为团队设定目标，确保执行力<br>驱动力和增长指标</p>
<hr>
<p>初始业务切入点要尽可能的小，但要比市场上现有产品相比要好上十倍<br>发展市场中的顾客，面对自己的需求急需一个解决方案，他们会因此愿意容忍一个尚不完美的产品</p>
<hr>
<p>不断的用户反馈-优化-用户反馈</p>
<p>创始人每天除去吃饭睡觉、锻炼身体，剩下的时间全都用来不断重复“与用户交流”，“根据反馈改进产品”这一循环。创业者需要这样一个把用户的反馈转化成产品的机制。</p>
<hr>
<p>在现实世界中找到一个对产品有认同感的人，观察他使用产品的习惯，询问他是否喜欢，是否愿意为此支付费用，是否会向朋友推荐这款产品。分析用户的需求后，改进产品。新产品再由用户试用，提交新一轮的反馈。这个反馈循环应该存在产品的整个生命周期中。同时注意，这项工作必须由创业者亲自完成，不可借由员工之手，因为这是了解自己目标用户的绝佳途径。</p>
<p>然后，先让一部分人爱上你的产品。当有一批初始用户非常热爱你的产品时，他们会主动向身边的人推荐。这样不断发散开来，用户数就会飞快地增长。可如果一开始只有一部分人对你的产品表示还行，那他们后续也很难从这份“还行”，发展到热爱。若用户数没有自然增长，说明产品尚不够优秀。不要忽视这个现象，并抱着侥幸心里，只顾坐等合作伙伴的援助。</p>
<hr>
<p>产品要简单点再简单点。</p>
<p>产品日后的设计可以非常庞大，但在初始阶段一定要简洁易用。想想只有一个输入框，两个按钮的 Google，你就能明白。简单的产品还有一个好处，开发者能在一个领域将一个性能做到机制。这在日后会成为用户爱上产品的理由。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Projects" scheme="http://ecmadao.com/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>极客与团队</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Projects/%E6%9E%81%E5%AE%A2%E4%B8%8E%E5%9B%A2%E9%98%9F/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Projects/极客与团队/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#%E6%9E%81%E5%AE%A2%E4%B8%8E%E5%9B%A2%E9%98%9F">极客与团队</a><ul>
<li><a href="#%E4%BF%A1%E6%81%AF%E9%80%8F%E6%98%8E%E5%BA%A6workflow">信息透明度/Workflow</a><ul>
<li><a href="#%E4%BF%A1%E6%81%AF%E9%80%8F%E6%98%8E%E5%BA%A6">信息透明度</a></li>
<li><a href="#workflow">Workflow</a></li>
</ul>
</li>
<li><a href="#geek-%E6%B0%9B%E5%9B%B4">Geek 氛围</a><ul>
<li><a href="#%E5%9B%A2%E9%98%9F%E5%88%9B%E6%96%B0">团队创新</a></li>
<li><a href="#%E5%86%92%E9%99%A9">冒险</a></li>
<li><a href="#%E4%B8%8D%E5%81%9A%E6%97%A0%E8%84%91%E7%9A%84%E5%A3%AB%E5%85%B5">不做无脑的士兵</a></li>
</ul>
</li>
<li><a href="#%E9%A1%B9%E7%9B%AE%E3%80%81%E9%9E%AD%E7%AC%9E%E4%B8%8E%E6%BF%80%E5%8A%B1">项目、鞭笞与激励</a><ul>
<li><a href="#%E9%A1%B9%E7%9B%AE%E6%96%B9%E5%90%91deadline">项目方向/Deadline</a></li>
<li><a href="#%E5%8F%8D%E9%A6%88">反馈</a></li>
<li><a href="#%E8%87%AA%E7%94%B1%E4%B8%8E%E8%8D%A3%E8%80%80">自由与荣耀</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="极客与团队"><a href="#极客与团队" class="headerlink" title="极客与团队"></a>极客与团队</h2><blockquote>
<p>写在前面的话：</p>
<p>接下来我要说的这些话可能都是扯淡。毕竟，没有很好的实践过的方法论≈扯淡</p>
</blockquote>
<p>虽然我并不能算是有过领导开发团队的经验，也不敢自称是一名优秀的工程师。但身为一个向往极客、支持开源和信息共享的开发者，自己对于工作环境和团队建设还是有一些看法，更不用说向往着一个极客范的团队了。本文有感而发自《极客与团队》，顺便就几点附上个人见解。</p>
<h3 id="信息透明度-Workflow"><a href="#信息透明度-Workflow" class="headerlink" title="信息透明度/Workflow"></a>信息透明度/Workflow</h3><h4 id="信息透明度"><a href="#信息透明度" class="headerlink" title="信息透明度"></a>信息透明度</h4><p>一个好的开发团队其内部信息应该是完全透明的。这不仅意味着前后端工程师要知道对方做了什么，意味着看见shit一样的代码时应该以恰当方式提出并改进，也意味着全员都知道产品的走向和需求。</p>
<p>或许对于一个普通的开发而言，他自身并不想过多参与到产品的走向和决策过程。毕竟，“上班不要跟我谈理想，我的理想就是不上班”嘛。但是对于一个积极的、海盗式的团队而言，我不觉得有任何的益处。而一个想要成为优秀团队的团队里有那样的人，我想，管理者们也可以好好思考一下“劣币逐良币”这句话。</p>
<h4 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h4><p>高信息透明度意味着大量的沟通，但绝不提倡频繁或冗长的会议。会议是扼杀创造的摇篮。如何在沟通时间和信息传达量上寻找一个微妙的平衡点，是一个值得研究的问题。</p>
<ul>
<li>站会：估计是敏捷开发时最爱的会议了吧。团队聚集在一起快速交流，整体时间维持在十分钟左右。大家相互了解对方做了什么要做什么，同时也简要说下自己的情况，有任何问题，都放在会后私下沟通。</li>
<li>团队规划：团队规划通常有两种选择<ol>
<li>开发团队/产品团队/设计团队三个大团队，共同负责某个产品的开发。而在会议时，会由各个团队的负责人碰面开会，之后由负责人向各团队组员传达信息。（不推荐）</li>
<li>开发团队/产品团队/设计团队各个团队分别抽出一两个人（建议不超过两人），组成多个小型团队，每个小团队负责某个功能点的开发。（推荐）</li>
</ol>
</li>
<li>工作法：<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E7%9C%8B%E6%9D%BF_(%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91" target="_blank" rel="external">看板</a>)：看板工作法，通俗易懂的解释的话，就是讲各个任务按照“计划中”、“待开发”、“开发中”、“已上线”等方式进行划分，然后将任务分配给团队各成员。其实我们在使用 trello、worktile等软件的时候就是按照这样的方式进行任务追踪和管理的。</li>
<li><a href="http://blog.devtang.com/2014/09/13/scrum-introduction/" target="_blank" rel="external">Scrum</a>：针对任务而组件一个十人以内的小型团队，涵盖产品负责人、开发人员、统筹人员。保持完全的透明和高效沟通。开发人员需要对每一个任务，从难度到架构、细节等各个角度进行评估，从而进行任务认领和时间分配</li>
</ul>
</li>
</ul>
<p>撇开站会不说，先谈下团队规划。我个人更加偏好于第二种，即抽出各团队人员组成小型团队的方法。因为它保障了团队的敏捷性，并借助于人数少的优点，降低了沟通成本，减少了信息在传递过程中的扭曲率。而 Scrum 和看板两种工作法都很好，他们完全可以搭配在一起使用。比如这篇文章：<a href="http://www.jianshu.com/p/e44b1038c9cf" target="_blank" rel="external">《Scrum vs. 看板，还是Scrum + 看板？》</a>，就很好的融合了两者的优点。况且 Scrum 工作法本身要求的就是“不大于10人的小型团队”。</p>
<h3 id="Geek-氛围"><a href="#Geek-氛围" class="headerlink" title="Geek 氛围"></a>Geek 氛围</h3><h4 id="团队创新"><a href="#团队创新" class="headerlink" title="团队创新"></a>团队创新</h4><p>团队需要在保存自我的前提下不断引入新鲜血液。有时候会由新人带来，有时候则是新技术。一个开放的环境极其重要的。如果可以的话，为什么不花一小部分时间研究一下新技术/新框架/新插件，或者自己造一个轮子呢？</p>
<p>我们在开发过程中，选择的插件或者框架必然是由真实的需求所决定的。但当某些现成的方案有缺陷，不能很好的达到自己想要的目标时，如果没有造过轮子，不了解其具体实现，很容易就会懵逼吧。所以，不仅仅是要知道在什么需求时用什么解决，多少也要了解其内部实现吧。鼓励团队创新，鼓励尝试新技术，鼓励踩坑。</p>
<h4 id="冒险"><a href="#冒险" class="headerlink" title="冒险"></a>冒险</h4><p>对于管理者而言，冒险意味着放手管理，让工程师参与到项目走向/设计等“非专业领域”；而对于工程师而言，冒险意味着做自己认为正确的事情。产品的需求和设计或许有80%都是错的，而毕竟有时候，工程师是面向用户的第一道也是最后一道防线。</p>
<p>如果工程师缺乏思考，那就相当于把赌注全部压在了产品/设计身上。但这部分群体却往往不是直接接触用户的。你可能会说：“你在逗我？产品经理还不够接触用户？”，但别忘了，他们接触的用户，很大一部分要么是已经使用了线上产品的用户，要么是提出很多需求的用户（而他们的需求有可能80%都是无用的）。而只有工程师，尤其是前端工程师（还包括了iOS/Android端工程师），在进行开发的时候，会一遍一遍又一遍的调试产品。这种时候，开发人员完全可以充当一个小白用户啊！完全可以在开发过程中以一个用户的角度去思考产品设计、交互是否合理。</p>
<p>所以要时刻提醒的是，一个开发团队，远不止仅负责“最终实现”这么简单。他们是产品上线前的第一道防线，一个思考的机会，更是在上线后处于首当其冲的地位。</p>
<h4 id="不做无脑的士兵"><a href="#不做无脑的士兵" class="headerlink" title="不做无脑的士兵"></a>不做无脑的士兵</h4><p>产品 – 设计 – 开发，这是一种传统的工作流。在这种工作方式下，工程师只要按需完成任务就行了。不能说这种方式有什么不好 – 相反的，这应该算是产品开发最佳实践之一了 – 但是，对 geek 而言，这是不是太无趣了一点？这一点和上一节的“冒险”相呼应。如果仅仅是单纯的开发，不仅无趣，而且危险。它会让你丧失一道防线，会慢慢的驱逐团队内优秀的工程师。</p>
<h3 id="项目、鞭笞与激励"><a href="#项目、鞭笞与激励" class="headerlink" title="项目、鞭笞与激励"></a>项目、鞭笞与激励</h3><h4 id="项目方向-Deadline"><a href="#项目方向-Deadline" class="headerlink" title="项目方向/Deadline"></a>项目方向/Deadline</h4><p>项目的方向是什么？我们最终是为了创造什么而开发什么？有多少用户在使用它？产品最终又给用户带来了什么价值？不知道这些的工程师们又怎能开发出优秀的产品呢？</p>
<p>Deadline不是万能的，没有Deadline是万万不能的。Deadline是工程师的天敌，而根据人月神话，软件开发的时间更是随着工程师人数的增加而指数式增加。要避免人数臃肿，最大化利用每个人的能力。</p>
<h4 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h4><p>工程师需要知道他们开发出的产品到底在市场里获得了怎样的反馈。一个赞扬也至关重要。除非工程师对自己做出的东西没有感情，不在乎它的存亡，否则的话，自己亲手开发出的产品应该像亲儿子一般的呵护。我最讨厌的就是仅仅让工程师按需完成任务，而完成之后，有bug就疯狂的找工程师们维修，除此以外也没有其他反馈。拜托，不要把工程师们当做木头人啊。</p>
<h4 id="自由与荣耀"><a href="#自由与荣耀" class="headerlink" title="自由与荣耀"></a>自由与荣耀</h4><p>很多创业型公司都会周期性规划复数个开发任务，以此不断的进行产品迭代。譬如说规划一周内15个任务。而一个糟糕的例子则是，当工程师高效工作提早完成任务之后，被认为偷懒或者任务安排的太少 – 即便是后者，这也是管理者的错误 – 在这之后作为“弥补”，给予了工程师更多的工作。而这种方式只会让他们的效率越来越低。</p>
<p>传统的条条框框，从来都不是一个培育优秀团队的良好环境，而是低效的温床。我不认为传统的打卡制和绩效制对优秀的开发团队会有太大的正面促进作用，反之，给人以束缚感，甚至可能降低团队工作效率。因此，我完全无法理解鼓励加班甚至影响要求加班的团队。身为开发者，如果真的热爱这个团队，热爱自己做的产品，对自己开发出的产品有自豪感的时候，是不需要有什么硬性要求的。</p>
<p>讲到这儿，我想起一个以前看到过的某一家公司制作的专门招聘工程师的宣传视频，大致内容如下：我（视频是第一人称视角）是个程序员，为了生计辛勤劳作，也换过好几家公司，但在每家公司都要加班到很晚很晚，陪伴自己的只有桌边恋人送的礼物和深夜的篮球直播。但到了这家公司（制作该招聘视频的公司），我依旧要加班，但加班到深夜时抬头一看~嗬！同事们都洋溢着热情的笑脸围在我身边呢！从此以后我加班不在孤独了~（此时放出画外音：我们陪你在一起！）</p>
<p>What the f**k!!!! Seriously??? 可惜我忘了视频在哪儿看的了不然一定放出链接。真的想知道贵司最后找到开发了吗？贵司听说过工程师文化吗？贵司尊重员工的个人权益吗？贵司。。还没倒闭吗？</p>
<p>我想说明的，就是上面说表述过的：身为开发者，如果真的热爱这个团队，热爱自己做的产品，对自己开发出的产品有自豪感的时候，是不需要有什么硬性要求的。</p>
<p>关于加班，你还可以再去看看这篇文章：<a href="http://coolshell.cn/articles/10217.html" target="_blank" rel="external">加班与效率</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实说了这些，无非只有几点：</p>
<ul>
<li>保持团队简洁，高效沟通，高透明度</li>
<li>给予工程师信任和自由</li>
<li>团队内所有人都能参与到产品走向和决策</li>
<li>尊重工程师文化</li>
<li>保持反馈</li>
</ul>
<p>能做到这些很不容易。它不仅仅依赖于公司文化，更依靠个人素养和追求。但无论如何，我们都不应该降低标准。不降低招人的标准，亦不降低自我要求的标准。</p>
<blockquote>
<p>最后，《极客与团队》是本好书。内容不多，身为工程师，无论是否是团队领导者，都应该去看一看。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Projects" scheme="http://ecmadao.com/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>设计APP时的必考题</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Projects/%E8%AE%BE%E8%AE%A1APP%E6%97%B6%E7%9A%84%E5%BF%85%E8%80%83%E9%A2%98/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Projects/设计APP时的必考题/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#%E8%AE%BE%E8%AE%A1app%E6%97%B6%E7%9A%84%E5%BF%85%E8%80%83%E9%A2%98">设计APP时的必考题</a><ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E4%B9%8B%E5%89%8D%EF%BC%9A">使用之前：</a></li>
<li><a href="#%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8%EF%BC%9A">开始使用：</a></li>
<li><a href="#%E5%86%8D%E6%AC%A1%E4%BD%BF%E7%94%A8%EF%BC%9A">再次使用：</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="设计APP时的必考题"><a href="#设计APP时的必考题" class="headerlink" title="设计APP时的必考题"></a>设计APP时的必考题</h2><p>1.理解人们的需求</p>
<p>2.理解人们是如何对事物做出反应的</p>
<p>通过感知身边一切新事物可以更好地磨练自己的产品直觉，体验一款新 App就是一种很好的方式，从应用商店下载 App，打开它，使用它，开始你的产品评判吧。</p>
<h3 id="使用之前："><a href="#使用之前：" class="headerlink" title="使用之前："></a>使用之前：</h3><p>1.这款App是如何吸引到你的注意力的？</p>
<p>是朋友推荐吗？他为什么推荐给你？还是你在一篇文章中看到了这个App？如果是，是什么促使你去找到这款App下载它？它的图标或名字吸引了你吗？你以前听说过它吗？听说过几次，为什么当时没有下载而现在下载了呢？</p>
<p>2.在使用之前给这款App一句话评价，你会说什么？</p>
<p>对比使用前后的评价将会非常有趣。</p>
<p>3.你现在对它的感觉如何？</p>
<p>你觉得它会流行吗？它有用吗？你下载这个 App时看过评分、评论和描述吗？</p>
<p>你对一款新 App的第一印象有助于让你更好地理解一款 App的“价值主张“、市场营销以及产品背后的团队想要营造一种什么样的印象。</p>
<h3 id="开始使用："><a href="#开始使用：" class="headerlink" title="开始使用："></a>开始使用：</h3><p>现在打开这款 App开始把玩它。尽量按照正常的使用时间来用它（可能是几分钟也可能是半小时），然后问你自己以下几个问题：</p>
<p>1.产品的开始界面或注册体验怎么样？</p>
<p>是很简单的按几个按钮还是有一堆复杂的验证步骤？</p>
<p>2.这款应用在最初怎样引导使用？</p>
<p>它是否清晰地展现了如何使用？引导界面友好吗？你看介绍信息吗？会不会因为介绍信息又长又无聊而略过它们？</p>
<p>3.这款App的易用性如何？</p>
<p>你能立刻明白怎么使用，还是得研究一下才行？App里有很多引导流程，还是整个感觉都很熟悉和简单？</p>
<p>4.使用这款app时整体感觉如何？</p>
<p>是轻松愉悦还是因为找不到返回按钮而很沮丧？这款 App让你感到更智能和高效了吗？有没有发现让你惊叹的小细节？</p>
<p>5.这款App符合你的预期吗？</p>
<p>想想你原来希望这款 App做什么，实际使用中，它达到你的预期了吗？如果是以内容为主的 App，其中的内容你感兴趣吗？如果是工具型 App，那么它解决实际问题了吗？</p>
<p>6.你这个App上花费了多长时间？</p>
<p>使用时间与用户兴趣直接相关，如果你花的时间很长，那么是什么原因呢？</p>
<p>大部分人对于产品的印象都是在头几分钟内形成的，回顾这个过程能够让你更好的理解一款 App是如何创造价值，如何方便使用，如何让人感觉到开发者的用心。</p>
<h3 id="再次使用："><a href="#再次使用：" class="headerlink" title="再次使用："></a>再次使用：</h3><p>第一次使用 App之后的几天甚至几周的时间也非常重要，能够让你看出产品的持久度和成长性。</p>
<p>1.你多久用一次这个App？什么时候用？是什么促使你打开它？</p>
<p>是因为通知推送？还是因为周围的朋友都在使用和讨论它？你越来越离不开这款 App还是它成为你实现目标的障碍？它能否成为你日常生活习惯的一部分？为什么?</p>
<p>2.这款App与其它类似App相比怎么样？</p>
<p>哪些地方做得更好，哪些地方不好？你为什么愿意选择这款而不是另外一款 App？</p>
<p>3.其他人怎么看这款App？</p>
<p>看看人们在网上是如何评论它的，你身边的亲朋好友是如何使用它的？别人的评价与你的看法吻合吗？如果不一样是为什么呢？</p>
<p>4.基于你所了解的这些，你认为这款App在一年后会发展成什么样？</p>
<p>把你的真实想法记录下来，储存好对于日后的总结分析非常有用。</p>
<p>5.一段时间以后，看看你之前的预言是否正确</p>
<p>如果没有，为什么？你的个人喜好与市场表现有什么不同？你一定要理解这一点，这样在未来你才能合理的修正你的看法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Projects" scheme="http://ecmadao.com/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>阅读源码</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Projects/%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Projects/阅读源码/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81">阅读源码</a><ul>
<li><a href="#%E8%AE%B0%E5%BD%95">记录</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E6%80%9D%E8%80%83">如何思考</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="阅读源码"><a href="#阅读源码" class="headerlink" title="阅读源码"></a>阅读源码</h2><p>摘自<a href="http://blog.csdn.net/foruok/article/details/51235517" target="_blank" rel="external">这样读源码，不牛X也难
</a></p>
<h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><ul>
<li>找到适合你的记录方式，尽可能详细的记录，但不必看到什么记录什么。要间隔性的记录，比如弄明白了某个子模块的逻辑、某个类的作用、某些函数的调用关系时再记录，否则记录这个动作本身会打断思考</li>
<li>每天工作结束，记录进度（弄明白的部分），记录疑问，记录第二天要弄明白什么东西，这样你的工作状态就入栈了，第二天来了很容易出栈，快速进入工作状态</li>
<li>记录看到的优秀设计，提高审美，见贤思齐，自我成长</li>
</ul>
<h3 id="如何思考"><a href="#如何思考" class="headerlink" title="如何思考"></a>如何思考</h3><ul>
<li>理清某一业务如何映射在代码执行流程上的，这点很关键。</li>
<li>理清不同模块间的业务关系，代码调用关系，很关键</li>
<li>调试是弄明白代码调用流程的最快方式之一</li>
<li>找出关键代码（代表实际对象的类、衔接不同模块的类、代表业务关键节点的类）</li>
<li>分析日志可以帮助分析代码执行流程和业务流程</li>
<li>先用已有的可运行软件，体验业务，琢磨你点这里一下点那里一下代码可能是怎么做出反应的</li>
<li>阅读应该围绕目的，把实现目标放在第一位，比如修改Bug，如果有期限，在最后日期前搞定是第一要务，然后有时间就继续读源码或改进Bug修复方案，力求没有副作用和后遗症，再有时间就修修别人留下的破窗户</li>
<li>千万次的问</li>
<li>对着设计文档、接口文档或测试用例看代码</li>
<li>心理调试，勿畏难，别放弃</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Projects" scheme="http://ecmadao.com/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>进行产品设计所必须思考的</title>
    <link href="http://ecmadao.com/2017/01/13/Notes/Projects/%E8%BF%9B%E8%A1%8C%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E6%89%80%E5%BF%85%E9%A1%BB%E6%80%9D%E8%80%83%E7%9A%84/"/>
    <id>http://ecmadao.com/2017/01/13/Notes/Projects/进行产品设计所必须思考的/</id>
    <published>2017-01-13T05:58:37.000Z</published>
    <updated>2017-01-14T12:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></em></p>
<ul>
<li><a href="#%E8%BF%9B%E8%A1%8C%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E6%89%80%E5%BF%85%E9%A1%BB%E6%80%9D%E8%80%83%E7%9A%84">进行产品设计所必须思考的</a><ul>
<li><a href="#%E5%A6%82%E4%BD%95%E8%AE%A9%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8%E5%B9%B6%E7%86%9F%E6%82%89%E4%B8%80%E4%B8%AA%E4%BA%A7%E5%93%81%EF%BC%8C%E7%94%9A%E8%87%B3%E6%88%90%E4%B8%BA%E4%B9%A0%E6%83%AF%EF%BC%9F">如何让用户使用并熟悉一个产品，甚至成为习惯？</a><ul>
<li><a href="#%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6">触发机制</a></li>
<li><a href="#%E6%89%A7%E8%A1%8C%E8%83%BD%E5%8A%9B">执行能力</a></li>
<li><a href="#%E8%A1%8C%E4%B8%BA%E5%8A%A8%E6%9C%BA">行为动机</a></li>
</ul>
</li>
<li><a href="#%E4%BA%A7%E5%93%81%E7%A9%B6%E7%AB%9F%E6%BB%A1%E8%B6%B3%E7%94%A8%E6%88%B7%E7%9A%84%E4%BB%80%E4%B9%88%E9%9C%80%E6%B1%82%EF%BC%9F%E8%83%BD%E5%90%A6%E7%BB%A7%E7%BB%AD%E6%B7%B1%E5%BA%A6%E6%8C%96%E6%8E%98%E5%85%B6%E9%9C%80%E6%B1%82%EF%BC%9F">产品究竟满足用户的什么需求？能否继续深度挖掘其需求？</a><ul>
<li><a href="#%E7%94%A8%E6%88%B7%E8%A7%92%E8%89%B2%E4%B8%8E%E9%9C%80%E6%B1%82">用户角色与需求</a></li>
<li><a href="#%E9%98%B6%E6%AE%B5%E4%B8%8E%E5%85%B3%E9%94%AE%E7%82%B9">阶段与关键点</a></li>
</ul>
</li>
<li><a href="#%E7%97%9B%E7%82%B9%E4%B8%8E%E7%97%92%E7%82%B9">痛点与痒点</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="进行产品设计所必须思考的"><a href="#进行产品设计所必须思考的" class="headerlink" title="进行产品设计所必须思考的"></a>进行产品设计所必须思考的</h2><h3 id="如何让用户使用并熟悉一个产品，甚至成为习惯？"><a href="#如何让用户使用并熟悉一个产品，甚至成为习惯？" class="headerlink" title="如何让用户使用并熟悉一个产品，甚至成为习惯？"></a>如何让用户使用并熟悉一个产品，甚至成为习惯？</h3><p>想要用户安装产品的行为规律执行操作，需要满足下面三个条件：</p>
<ul>
<li>行为动机</li>
<li>执行能力</li>
<li>触发机制</li>
</ul>
<p>为了让一个行为发生，用户需要足够的动机和激励（触发机制），还得有执行动作的能力。当动机和能力都满足的时候，一旦触发机制达到条件，用户行为就会自然而然的展现。</p>
<p>以减肥为例，原本预定今天运动减肥，但没有执行，why?</p>
<ul>
<li>因为太忙完全忘了原计划（没有触发机制）</li>
<li>因为懒惰放弃了原计划（没有能力）</li>
<li>自己很健壮了觉得没必要，改变了原计划（没有动机）</li>
</ul>
<p>所以，用户每一个动作的发生，其背后都蕴含了相应的需求。要先明确用户遭遇的问题在哪里，问题在何种情景下会被触发。用户放弃操作，触发机制/能力/动机中必然有一个是主要因素，是必须被明确并解决的对象。</p>
<h4 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h4><ul>
<li>内部触发机制</li>
</ul>
<p>用户有确实的需求，需要通过我们的产品来达到自身的目的</p>
<ul>
<li>外部触发机制</li>
</ul>
<p>一条推送，一封邮件。。唤醒用户对我们产品记忆和需求的方式都可以算为外部触发机制</p>
<p>当用户有能力执行操作使用产品，并有一定的意愿主动使用的时候，便捷的渠道和服务可以推波助澜的帮助用户触发频繁使用的行为</p>
<ul>
<li>常见流程</li>
</ul>
<p>外部触发 -&gt; 使用产品 -&gt; 优秀的体验 -&gt; 内部触发为主（外部触发为辅）</p>
<h4 id="执行能力"><a href="#执行能力" class="headerlink" title="执行能力"></a>执行能力</h4><p>核心在于产品的易用性。</p>
<p>用户执行能力：</p>
<ul>
<li>时间</li>
<li>资金</li>
<li>认知需求</li>
<li>体力需求</li>
<li>社会偏差行为</li>
<li>非例行性功能 </li>
</ul>
<h4 id="行为动机"><a href="#行为动机" class="headerlink" title="行为动机"></a>行为动机</h4><ul>
<li>为什么/凭什么要使用我们的产品？</li>
<li>用户能够获得哪些好处？</li>
<li><p>有趣吗？有什么吸引人的特色？</p>
</li>
<li><p>良好的设计和愉悦的用户体验</p>
</li>
<li>基于用户行为进行产品设计</li>
</ul>
<h3 id="产品究竟满足用户的什么需求？能否继续深度挖掘其需求？"><a href="#产品究竟满足用户的什么需求？能否继续深度挖掘其需求？" class="headerlink" title="产品究竟满足用户的什么需求？能否继续深度挖掘其需求？"></a>产品究竟满足用户的什么需求？能否继续深度挖掘其需求？</h3><h4 id="用户角色与需求"><a href="#用户角色与需求" class="headerlink" title="用户角色与需求"></a>用户角色与需求</h4><ul>
<li>“用户”是一个虚拟群体概念，找不到一个具体的人代表用户</li>
<li>不同角色的用户有不同层面的需求</li>
<li>不同时期的用户有不同层面的需求</li>
<li>“用户”实际上根本不知道自己需要什么</li>
</ul>
<p>假如你只是去做一个即有产品的新功能，或者想设计一个新玩意，那有两个比参悟“用户需求”更切实的做法：</p>
<ul>
<li>疯狂的热爱你的产品</li>
<li>尝试去解决你遇到的最大痛点</li>
</ul>
<p>在设计产品或改版时，明确：</p>
<ul>
<li><strong>一个</strong>核心需求（产品用途）<ul>
<li>一款产品只有一个核心需求，其他都是次级需求</li>
<li>通过核心需求所引领的用户群体，对于打造产品品牌和氛围来说至关重要</li>
</ul>
</li>
<li>与同类产品相比，自身的独特性是什么？（产品特色）</li>
<li>用户角色分解（怎么样让用户用的更爽）<ul>
<li>不同角色用户有自己不同的需求</li>
<li>不同的使用场景需求可能改变</li>
</ul>
</li>
<li>用户奖励/角色成绩感<ul>
<li><strong>用户核心需求被满足时获得的成就感</strong></li>
<li>当无关的激励干扰到他的核心需求时，他真正的成就感降低了</li>
<li><strong>产品的奖励制度不能喧宾夺主，影响产品主要功能对用户的吸引</strong></li>
<li>商业模式不清晰的产品没有敏感的量化指标，又忽略用户核心需求的时候，过度游戏化时，次要的角色的成就立即喧宾夺主了</li>
</ul>
</li>
</ul>
<h4 id="阶段与关键点"><a href="#阶段与关键点" class="headerlink" title="阶段与关键点"></a>阶段与关键点</h4><p>将产品的使用方式作为Y轴，用户生命周期作为X轴，罗列出可能的“用户在不同时期对产品的需求”</p>
<ul>
<li>什么样的角色（用户画像）会使用各阶段的功能？</li>
<li>一个用户在最初接触产品，到最终流失的阶段里，可能会接触到产品的哪些功能？什么是促使他使用那些功能的原因？</li>
<li>用户会在哪些阶段流失？为什么会流失？</li>
<li>怎样让这个用户较长时间的停留在我们想要的阶段？</li>
</ul>
<p>产品在各个周期上的关键点是什么？</p>
<ul>
<li>以用户的角色使用产品，查看产品在各个流程上有什么可以提升的点</li>
<li>我们产品在关键点上如何做的？竞品？有什么突破性的创新点？AB-Test了吗？</li>
<li>何时可以形成一个用户闭环？用户的生命周期可以闭环链接在一起吗？</li>
</ul>
<blockquote>
<p>产品设计“九步法”</p>
<p>第一步：产品满足用户的哪一个核心需求?</p>
<p>第二步：与同类产品相比你的独特性什么?</p>
<p>第三步：分解用户。根据产品的核心价值，将用户分解成不同角色。</p>
<p>第四步：变成用户。每类角色回答以下两个问题：</p>
<p>问题一：该角色为什么会使用这个产品?</p>
<p>问题二：该角色怎样知晓和到达这个产品?</p>
<p>第五步：确定角色成就。确定产品如何满足不同角色的成就感。</p>
<p>第六步：确定用户需求满足过程中的关键点。</p>
<p>第七步：提升关键点的转化率。</p>
<p>第八步：形成闭环。让产品能够自我成长。</p>
<p>第九步：大干快上，迅速迭代。</p>
</blockquote>
<h3 id="痛点与痒点"><a href="#痛点与痒点" class="headerlink" title="痛点与痒点"></a>痛点与痒点</h3><p>痛点是什么？喝了要喝水，饿了要吃饭，这是实实在在的痛点。痛点是可以用数字衡量的指标，是具体的逻辑化的东西。<br>痒点呢？是那些微小的刺激，让你心里痒痒的忍不住去做什么事，或者说是那些能够吸引的提升愉悦度的细节。是在满足痛点之外的那些小刺激小愉悦</p>
<p>痛点，定义产品的切入点与重心点。而用户黏度来自痒点的运营。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPD
    
    </summary>
    
    
      <category term="Projects" scheme="http://ecmadao.com/tags/Projects/"/>
    
  </entry>
  
</feed>
